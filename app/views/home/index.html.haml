%h1 Welcome

%p.warning

  NOTE: This project is experimental in nature.  Any representations
  regarding authentication or authority should be taken with a grain
  of salt.  This project has no affiliation with either the rubygems
  project or rubygems.org

%p

  The goal of this project is to provide:

  %ol
    %li

      A mechanism for gem users and developers to sign and verify gems
      that is simple and immediately usable via a

      %a{:href=>"https://github.com/grant-olson/rubygems-openpgp"} rubygems plugin

      \.

    %li

      A single entity for gem users to authenticate and trust (or not)
      instead of having to authenticate hundreds of individual gem
      developers.

    %li

      %a{:href => authentication_url} Basic authentication of developers

      and their signing keys to provide some assurances
      that gems are signed by an authorized key.

    %li

      A

      %a{:href => key_security_url} secure signing process

      that prevents a malicious user from
      issuing bogus signatures on our behalf.

%p.warning 

  Step one is the most important part.  If we can get developers and
  users to sign and verify gems, there are a multitude of
  authentication methods that can be modeled on top of the core.  This
  can be done independently by any third party, and end users can
  decide what authentication systems they do and don't trust.

%h2 Daily Usage

%h3 For gem users

%p 

  After installation and configuration, you simply add the
  %code --verify
  flag when installing your gems.

%pre

  gem install openpgp_signed_hola --verify

%p

  If the gem can be verified, it will be installed.  If not, you will
  get an error message.

%h3 For gem developers

%p

  After installation and configuration, you simply 
  %code --sign
  your gems before pushing to rubygems.org.

%pre 

  gem build foo.gemspec --sign
  gem push foo-0.0.0.gem

%h2 Installation and configuration

%h3 For gem users - Install the client software and configure the CA signing key

%ol

  %li

    Install

    %a{:href => "https://github.com/grant-olson/rubygems-openpgp"} rubygems-openpgp

    %pre

      gem install rubygems-openpgp

  %li

    Attempt to verify the test gem:

    %pre gem install openpgp_signed_hola --verify --get-key

    Note that the verify operation will succeed, but the
    signature will be untrusted:

    %pre
      :preserve
        gpg: WARNING: This key is not certified with a trusted signature!
        gpg:          There is no indication that the signature belongs to the owner.

  %li

    Download the signing key:

    %pre gpg --keyserver pool.sks-keyservers.net --recv-keys 0x6094099A

  %li

    Authenticate the key by comparing the fingerprint against a known
    good copy.  (

    %a{:href=>"https://github.com/grant-olson/rubygems-openpgp-ca.org"}Github

    )

    %pre gpg --fingerprint --list-key 0x6094090A

  %li

    Generate your signing key.

    %pre gpg --gen-key

  %li

    Sign the key on your local keyring:

    %pre gpg --lsign 0x6094090A

  %li

    Mark the key as trusted on your local keyring:

    %pre gpg --edit-key 0x6094090A trust quit

    Select
    %code 4 = I trust fully
    and hit ENTER.

  %li

    Verify the test gem:

    %pre gem install openpgp_signed_hola --verify

    Note that the gem is now trusted.

%h3 For gem developers - Generate, use, and submit a signing key.

%ol

  %li

    Generate a signing key.

    %pre gpg --gen-key

  %li

    Register it with keyservers.  (After creating an offline backup and
    revocation certificate.)

    %pre gpg --keyserver pool.sks-keyservers.net --send-keys 0xDEADBEEF

  %li

    Install 

    %a{:href => "http://github.com/grant-olson/rubygems-openpgp"} rubygems-openpgp

    %pre gem install rubygems-openpgp

  %li

    Sign your gem when you build it.

    %pre gem build foo.gemspec --sign

  %li

    Apply to register your key with us.

  %li 
    
    If you didn't do so, create an offline backup and revocation
    certificate of your signing key.

  %li 
    
    If you still didn't do so, create an offline backup and revocation
    certificate of your signing key.

    %pre

      :preserve
        cd /media/usb_stick
        gpg --export-secret-key 0xDEADBEEF > key_backup.gpg
        gpg --gen-revoke 0xDEADBEEF > key_revoke.gpg
