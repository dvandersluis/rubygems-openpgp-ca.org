<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>rubygems-openpgp Certificate Authority</title>
 <link href="http://rubygems-openpgp-ca.org/blog/atom.xml" rel="self"/>
 <link href="http://rubygems-openpgp-ca.org/"/>
 <updated>2013-02-25T19:00:16-05:00</updated>
 <id>http://rubygems-openpgp-ca.org/blog</id>
 <author>
   <name>rubygems-openpgp Certificate Authority</name>
 </author>

 
 <entry>
   <title>Gem Signing - X.509 vs OpenPGP</title>
   <link href="http://rubygems-openpgp-ca.org/blog/gem-signing-x509-and-openpgp.html"/>
   <updated>2013-02-26T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/gem-signing-x509-and-openpgp</id>
   <content type="html">&lt;h1&gt;Gem Signing - X.509 vs OpenPGP&lt;/h1&gt;

&lt;p&gt;This is a contentious topic.  It's right up there with Emacs vs Vim.
Kirk vs Picard.  Jesus vs Santa.  Etc.&lt;/p&gt;

&lt;p&gt;Some people have been dismissive of rubygems-openpgp.  &quot;Why not use
X.509?  That has native ruby libraries!  You don't need to rely on
gpg!&quot;  And I'm ashamed to say I've been equally dismissive.  &quot;Because
X.509 sucks!  It's broken!  Totally wrong for open source!&quot;  And then a
third party will chime in, &quot;Why are you arguing about technical
details?  It's all just RSA signatures in the end!&quot;&lt;/p&gt;

&lt;p&gt;I'm going to try to take a step back and articulate in concrete terms
why I don't think there will ever be a decent X.509 signing solution
for gems.  And why I think we should use OpenPGP even if it can't
immediately be used by all users.&lt;/p&gt;

&lt;p&gt;I'll avoid the more arcane technical details of each standard, and I
hope not to flame too much.&lt;/p&gt;

&lt;h2&gt;State of the Union&lt;/h2&gt;

&lt;p&gt;Basic functionality do sign gems with X.509 was introduced in release
0.8.11 of rubygems, in July of 2005.  And 7-1/2 years later we
have... basic functionality to sign gems with X.509.  In theory this
can be used by anyone using rubygems.  In practice it's used by no one.&lt;/p&gt;

&lt;h2&gt;Central Thesis, in Terms Anyone Can Understand&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An X.509 based system requires a complete &lt;strong&gt;centralized&lt;/strong&gt; end-to-end
authentication system to be in designed and implemented &lt;strong&gt;before&lt;/strong&gt; it
is useful to gem developers and users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An OpenPGP system allows gem developers and users to sign and verify
in a useful way &lt;em&gt;immediately&lt;/em&gt;.  Authentication systems can be added
&lt;strong&gt;after&lt;/strong&gt; the fact in a &lt;strong&gt;decentralized&lt;/strong&gt; fashion.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;X.509 is the cathedral, OpenPGP is the bazaar.&lt;/p&gt;

&lt;h2&gt;Why does X.509 Need the Authentication System First?&lt;/h2&gt;

&lt;p&gt;X.509 certificate chains start with a root Certificate Authority, may
have intermediate Certificate Authorities, that ultimately sign off on
developer's certificates.  They are strict tree structures.  Because
they are trees, each certificate can only have a single parent.&lt;/p&gt;

&lt;p&gt;As in biology, the parent must exist before the child.  Without a
Certificate Authority system in place before hand, a developer is left
with no choice but to issue a self-signed certificate.  This
conveniently sidesteps the ability to reliably authenticate the
signature.  Hence those nasty browser notices when you go to a
&lt;a href=&quot;https://web.monkeysphere.info/&quot;&gt;self-signed web page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Why doesn't OpenPGP?&lt;/h2&gt;

&lt;p&gt;OpenPGP's trust model is the Web of Trust.  A developer creates a
signing key.  After that, other key issuers can create signatures that
point to the keys they think are authentic.  Multiple issuers can say
they trust the same key.  The trust model is a directed graph.&lt;/p&gt;

&lt;p&gt;These signatures are issued &lt;em&gt;after&lt;/em&gt; key creation at any time by anyone
with or without involvement of the original developer.&lt;/p&gt;

&lt;h2&gt;Practical Implications&lt;/h2&gt;

&lt;h3&gt;X.509&lt;/h3&gt;

&lt;h4&gt;The Certificate Authority structure must be in place &lt;em&gt;before&lt;/em&gt; developers can create their own certificates&lt;/h4&gt;

&lt;p&gt;A developer can't create their own certificate until the CA structure
is designed and implemented.  They need to wait for the system to be
in place first.  If there is no CA structure in place, the only
alternative they have is to issue a self-signed certificate,
essentially declaring themselves a mini-CA.  In addition to mostly
side-stepping the authentication issue, thousands of self-signed
certificates don't scale if a user actually tries to authenticate
these self-signed keys.&lt;/p&gt;

&lt;h4&gt;A Certificate Authority can't approve old packages&lt;/h4&gt;

&lt;p&gt;If a developer later wants to switch over to a newly formed CA, they
must generate new certificates signed by the CA and republish their
software.  At the same time, if a Certificate Authority wants to
authenticate an existing package, they need to convince the developer
to do all of the above.  There are currently 50,000+ gems on
rubygems.org that would need to retroactively be re-signed and
republished if a new CA was introduced.&lt;/p&gt;

&lt;h4&gt;Single point of failure&lt;/h4&gt;

&lt;p&gt;Since each certificate can only have a single parent, if any parent or
grandparent becomes invalid and revoked, the developer's certificate
immediately becomes invalid as well.  The certificate chain cannot be
followed.  In this event a developer needs to issue a new certificate
signed by a new CA and republish their software.  An existing package
can't be re-certified.&lt;/p&gt;

&lt;h3&gt;OpenPGP&lt;/h3&gt;

&lt;h4&gt;You can generate a usable key anytime you want&lt;/h4&gt;

&lt;p&gt;There is no need to wait for &lt;strong&gt;the man&lt;/strong&gt; to build a CA framework and
setup signing keys.  Developers can make their keys and start using
them.  There is no penalty imposed by doing this.  A third party (or
multiple parties) can declare the key authentic after the fact.  This
can be done without having to republish the software and with or
without the cooperation of the developer.&lt;/p&gt;

&lt;h4&gt;Multiple trust paths can be established&lt;/h4&gt;

&lt;p&gt;Multiple trust paths can be established to a developer's key.  If one
trust path becomes compromised there may be alternate trust paths that
can be used.  If an end user doesn't like a particular trust path,
they can choose to ignore that and go with another.&lt;/p&gt;

&lt;h4&gt;Trees are subsets of directed graphs&lt;/h4&gt;

&lt;p&gt;You can implement a tree structure in a directed graph but not vice
versa.  And that's exactly what our Certificate Authority does.  It
models a CA-style tree on top the Web of Trust.&lt;/p&gt;

&lt;h2&gt;The problem with a volunteer X.509 solution&lt;/h2&gt;

&lt;p&gt;X.509 has a chicken-and-egg problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The system isn't usable until the Certificate Authority is designed
and implemented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The design and implementation of said Certificate Authority takes
serious time and effort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This system needs a general consensus between the CA, gem
developers, and gem users to be useful.  It is difficult to achieve
when you have thousands of people with different goals and needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's no guarantee that the system will be adopted, making the
time and effort to develop such a system high-risk.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And that's why I think we still don't have a usable signing mechanism
7-1/2 years after it was ostensibly possible for developers to sign
gems.  No one wants to spend a significant amount of time and energy
developing a solution in isolation that has no guarantee of being
used by or useful to the community.&lt;/p&gt;

&lt;h2&gt;OpenPGP-based systems don't have that problem&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A developer can start signing packages in a useful fashion with a
five minute time investment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various authentication systems can be implemented &lt;em&gt;after&lt;/em&gt; there are
a significant number of signed gems in circulation and it's easier to
demonstrate their usefulness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These systems can be as experimental as you want.  They don't
require anything near universal adoption.  They can be used in
parallel.  Niche systems can be useful to some users but not the
community at large.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;People can implement systems incrementally, and get the out there
where they can be seen by the community.  They can iteratively work on
a system and interact with other interested people from the beginning.&lt;/p&gt;

&lt;h2&gt;So what's better for a loosely based confederation of thousands of open source developers?&lt;/h2&gt;

&lt;h3&gt;A system that:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is centralized?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requires up front design and implementation before it can be used
by &lt;em&gt;anyone&lt;/em&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is strictly hierarchical with a single point of failure?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requires republishing to establish a certificate chains on
existing signed software?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Or an system that:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is decentralized?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is immediately usable by developers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is fault tolerant with multiple potential trust paths?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows end users to pick-and choose their authentication systems?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows various experimental authentication systems to fight-it-out
in a Darwinian fashion?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows certification to be performed after the fact without
republishing software packages?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Answer: OpenPGP&lt;/h2&gt;

&lt;p&gt;So Start signing your gems.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Signing Your Gems</title>
   <link href="http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-your-gems.html"/>
   <updated>2013-02-25T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-your-gems</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Signing Your Gems&lt;/h1&gt;

&lt;p&gt;By signing your gems you allow other users to verify the gem was
actually written and build by you.&lt;/p&gt;

&lt;h2&gt;OpenPGP Key Setup&lt;/h2&gt;

&lt;p&gt;You'll need to generate a signing key and publish it to the keyservers
so that users can retrieve the key.&lt;/p&gt;

&lt;h3&gt;Generating the key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the defaults are fine.  You will want to use a real email address
so users can tie the key to your account.&lt;/p&gt;

&lt;h3&gt;Publishing the key&lt;/h3&gt;

&lt;p&gt;This allows users worldwide to retrieve your public key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --send-key 0xDEADBEEF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Backups&lt;/h3&gt;

&lt;p&gt;Since you have actually published your key, it is highly advisable
that you back it up onto some safe offline media.  There is no way to
re-generate the key if you lose the copy on your machine.&lt;/p&gt;

&lt;p&gt;In addition, you'll want to generate a revocation certificate.  This
allows you to send a revocation to the keyserver network in the event
your key is compromised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /media/usb_stick
gpg --export-secret-key 0xDEADBEEF &amp;gt; key_backup.gpg
gpg --gen-revoke 0xDEADBEEF &amp;gt; key_revoke.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that the revocation certificate is unencrypted, and anyone
who can gain access to it can revoke your key worldwide.&lt;/p&gt;

&lt;h3&gt;The More You Know...&lt;/h3&gt;

&lt;p&gt;Since you will be using your key publicly, it is highly advisable that
you read up more on gnupg and OpenPGP.  But that's out of scope for
this article.&lt;/p&gt;

&lt;h2&gt;Signing Your Gem&lt;/h2&gt;

&lt;p&gt;Install rubygems-openpgp if you haven't yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign your gem before publishing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem build foo.gemspec --sign
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the signature.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem verify foo-0.0.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publish the gem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem push foo-0.0.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;At this point anyone can download your gem, retrieve your public key,
and verify the contents.  However, they don't have an easy way to
authenticate your key.  You may want to register it with this site.&lt;/p&gt;

&lt;h2&gt;Registering Your Public Key with rubygems-openpgp-ca.org&lt;/h2&gt;

&lt;p&gt;Fill out &lt;a href=&quot;http://localhost:3000/users/sign_up&quot;&gt;the application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will receive an email with some encrypted text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.11 (GNU/Linux)

hQEMAxRYvMtqj3z2AQf+I1+9b6RAysFonkr+A0ETE6paWAw6enZw8Z0uj24DBIjr
iRQf3s/HFKntOPs5ziLHWZS+5B7KuxvIiJQzvLDroLteBKYo0XwZTe3DTYAQz54b
aqe8Yk58dPvmAGJSqFhICXV2kv3QJftLTzXka5OxjhA93EJtK8Z+Orl1ZHgml/70
QAVqBEt83jLQhTfFJOYASoctAIJmTZzfUexGLReghOMBEF/hU85/9mMuMwHMrHou
ctpQ6IfxTEtVy+rUnOiJ6rK4Ky5th2NA7KoLnlDtB15xkkr7vWwTD2NuMX3KQZ87
GbvhqE272xCdJTGUAH9O1QcCMta6RSCKur19DkpBptI/AVKGxBdghd76yS8ImC7J
E5kQJdGMXbV1NWTE8azfKnvf1/0PbW9VjjB0CIc62hyYEwkh/WLp2LPnQPjQ1FiY
=qAbC
-----END PGP MESSAGE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're not using an &lt;a href=&quot;http://enigmail.net/home/index.php&quot;&gt;encryption enabled email
client&lt;/a&gt; you'll need to copy the
encrypted text into a file and decrypt manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg saved_text.asc
cat saved_text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the unencrypted link to complete the process.&lt;/p&gt;

&lt;p&gt;We'll review the application and hopefully sign off on your key.&lt;/p&gt;

&lt;h2&gt;Backup your public key&lt;/h2&gt;

&lt;p&gt;And after that...&lt;/p&gt;

&lt;h2&gt;Backup your public key&lt;/h2&gt;

&lt;p&gt;You did create a backup, right?&lt;/p&gt;

&lt;h2&gt;And you're done&lt;/h2&gt;

&lt;p&gt;That wasn't too bad, was it?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Signing the Certificate Authority Keys</title>
   <link href="http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-the-certificate-authority-keys.html"/>
   <updated>2013-02-24T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-the-certificate-authority-keys</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Signing the Certificate Authority Keys&lt;/h1&gt;

&lt;p&gt;In a perfect world you would meet the developer of every gem you use
in person, verify their OpenPGP key, and sign off on it.  But this
approach doesn't scale very well.  Even if you skip the in person part
of the verification and trust each developer's github page, you can
still end up with hundreds of keys that need to be verified.&lt;/p&gt;

&lt;p&gt;A Certificate Authority can help with that.  The basic idea is that
the Certificate Authority does its own verification on keys and
publishes that information.  Then you simply trust (or not) the single
Certificate Authority.  Now you only have one verification to perform.&lt;/p&gt;

&lt;h2&gt;Our Signing Key Configuration&lt;/h2&gt;

&lt;p&gt;All OpenPGP 'settings' are stored as digital signatures issued by
signing keys.  If you trust a key is authentic, you sign a little
document saying so.  If you want to expire an old key, you sign a
little document saying so.  If settings were just stored in a file,
then someone who has compromised your computer could just change the
&lt;code&gt;trusted_keys.txt&lt;/code&gt; file.  A signature requires control of the private
key which is usually encrypted.&lt;/p&gt;

&lt;p&gt;We have two different types of keys.  The &lt;strong&gt;master key&lt;/strong&gt; and the &lt;strong&gt;signing
key(s)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The master key is secured on a computer in an undisclosed location
that has never been on the Internet.  It is only fired up when we need
to issue a certification for a new signing key, which may happen once
or twice a year.  This certification is then transported via USB key
to another computer and distributed to the keyserver network.  This
makes it very difficult to compromise the master key.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;signing keys&lt;/strong&gt; are used to perform the day-to-day signing of
developer's keys.  They are contained on OpenPGP smartcards which
provide a few layers of security.  A PIN code must be entered every
time a signature is issued.  The card will only allow three pin
attempts before locking.  An attacker would need to physically possess
the card and know the PIN to issue a forged signature.&lt;/p&gt;

&lt;p&gt;As you can see, the signing keys are still very secure.  But in the
event one is compromised the &lt;strong&gt;master key&lt;/strong&gt; can revoke its
certification and issue a new certification on a new signing key.  It
just adds another layer of security to the process.&lt;/p&gt;

&lt;h2&gt;Telling gnupg That You Trust Our Keys&lt;/h2&gt;

&lt;p&gt;You'll want to issue a trust signature on the master key.  This says
that you trust signatures issued by any key that has been signed by
the master key itself.  In short, this means that you will ultimately
trust the &lt;strong&gt;signing keys&lt;/strong&gt; and everything will work the way you want
it to.&lt;/p&gt;

&lt;p&gt;But before you do that, you'll need to generate a gpg key if you
haven't already.&lt;/p&gt;

&lt;h3&gt;Generating your signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part you can follow the defaults.  I'll write in more
detail about generating keys in another post, but for now lets just
keep moving and generate a key quickly using the defaults.&lt;/p&gt;

&lt;h3&gt;Retrieving the Master Key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-keys 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying the fingerprint&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --fingerprint --list-key 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will show you the fingerprint of the key installed locally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   4096R/FDBA50FB 2013-02-16 [expires: 2014-02-16]
      Key fingerprint = BEED FE71 7668 50BF A6DE  5A19 25A6 5396 FDBA 50FB
uid                  rubygems-openpgp Certificate Authority MASTER KEY
                                  (http://rubygems-openpgp-ca.org)
sub   4096R/9A39A769 2013-02-16 [expires: 2014-02-16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll want to compare this with a copy of the fingerprint retrieved
from a trusted source.  In an ideal world, you would do this in
person.  But this can be impractical.&lt;/p&gt;

&lt;p&gt;For now, lets assume that the &lt;a href=&quot;https://github.com/grant-olson/rubygems-openpgp-ca.org&quot;&gt;copy listed at
github&lt;/a&gt; is
safe.  Now a malicious user would have to compromise both this site
and a github account to replace both key ids and fingerprints.&lt;/p&gt;

&lt;p&gt;Another option would be to verify that the key you have is signed by
the same key I use for &lt;a href=&quot;http://www.ruby-forum.com/topic/4411248#new&quot;&gt;release announcements on
ruby-talk&lt;/a&gt;.  That adds
another layer that a malicious user would need to compromise.  They'd
need to hack my email, and my personal OpenPGP key.&lt;/p&gt;

&lt;p&gt;At some point you'll have decided that that key is authentic based on
your own personal standards.&lt;/p&gt;

&lt;h3&gt;Issuing the trust signature&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --edit-key 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fire up an interactive session.  The settings can get a
little confusing so lets walk through them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ gpg --edit-key 0xFDBA50FB
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  4096R/FDBA50FB  created: 2013-02-16  expires: 2014-02-16  usage: SC  
                     trust: unknown       validity: unknown
sub  4096R/9A39A769  created: 2013-02-16  expires: 2014-02-16  usage: E   
[ unknown] (1). rubygems-openpgp Certificate Authority MASTER KEY
                                 (http://rubygems-openpgp-ca.org)

gpg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First you'll want to tell gpg that you're issuing a local trust
signature.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;local&lt;/strong&gt; part means that this signature will only
work on your local machine.  You will not advertise to the world that
you signed this key.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;trust&lt;/strong&gt; part means that you're issuing a trust signature as
discussed above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; tlsign

pub  4096R/FDBA50FB  created: 2013-02-16  expires: 2014-02-16  usage: SC  
                     trust: unknown       validity: unknown
 Primary key fingerprint: BEED FE71 7668 50BF A6DE  5A19 25A6 5396 FDBA 50FB

     rubygems-openpgp Certificate Authority MASTER KEY
                  (http://rubygems-openpgp-ca.org)

This key is due to expire on 2014-02-16.
Please decide how far you trust this user to correctly verify other users' keys
(by looking at passports, checking fingerprints from different sources, etc.)

  1 = I trust marginally
  2 = I trust fully

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next it will ask how much you trust the key.  This has to do with the
way the OpenPGP Web-of-Trust works, which I'll hopefully discuss in a
later post.  For now, say you trust it fully:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your selection? 2

Please enter the depth of this trust signature.
A depth greater than 1 allows the key you are signing to make
trust signatures on your behalf.

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting a depth of 2, the signing keys' signatures are trusted, but
developer keys are not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your selection? 2

Please enter a domain to restrict this signature, or enter for none.

Your selection? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just hit enter here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Are you sure that you want to sign this key with your
key &quot;Test User &amp;lt;test@example.org&amp;gt;&quot; (25D38721)

The signature will be marked as non-exportable.

Really sign? (y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select yes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Really sign? (y/N) y

You need a passphrase to unlock the secret key for
user: &quot;Test User &amp;lt;test@example.org&amp;gt;&quot;
2048-bit RSA key, ID 25D38721, created 2013-02-09
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll be prompted for a password.  Enter it.  At this point gnupg
still won't save the signature until you quit and save.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; quit
Save changes? (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Download the current signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-keys 0x6094090A
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Test with the test gem&lt;/h3&gt;

&lt;p&gt;If you've already installed the test gem and certified the signing
key, delete the key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --delete-key 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the install with &lt;code&gt;--verify&lt;/code&gt;, &lt;code&gt;--trust&lt;/code&gt;, and &lt;code&gt;--get-key&lt;/code&gt; args.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust --get-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is setup correctly, you should trust the package based
on the Certificate Authority signature on the key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &lt;kgo@grant-olson.net&gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &lt;kgo@grant-olson.net&gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Now you're set!&lt;/h2&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Verifying Gems with rubygems-openpgp</title>
   <link href="http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Verifying Gems with rubygems-openpgp&lt;/h1&gt;

&lt;p&gt;rubygems-openpgp allows you to verify a gem by checking the digital
signature.  This helps to ensure that the gem you are using is
actually the gem published by the author and that it hasn't been
replaced with malicious code.&lt;/p&gt;

&lt;p&gt;Gem users can verify their gems with a few simple steps.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;h3&gt;Install the rubygems plugin&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Install gpg if not installed.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gpg4win.org&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gpgtools.org/&quot;&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux - installed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure if you need to? Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Install and verify the test gem&lt;/h2&gt;

&lt;p&gt;There is a signed version of the hola gem on rubygems.org.  Try to
install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will probably fail with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:red;'&gt;You don't have the public key.  Use --get-key to automagically retrieve from keyservers
Fail!&lt;/span&gt;
ERROR:  Fail!
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is because you don't have the user's public signing key yet. This
is required to verify the signature. Try again with an extra option to
retrieve the public key automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --get-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will retrieve the key and the signature can be verified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Note that we were able to verify the signature, but it's listed as
&lt;strong&gt;TRUST_UNDEFINED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is because even though you've downloaded the key, you have no
idea if it is authentic. Anyone can make a key with any email and
upload it. (In fact there are several forged keys out there now that
are
&lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&amp;amp;search=president%40whitehouse.gov&amp;amp;fingerprint=on&quot;&gt;attributed to president@whitehouse.gov&lt;/a&gt;
.)  Hence the lack of trust.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp has a &lt;code&gt;--trust&lt;/code&gt; flag that will make sure you only
install trusted gems.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will fail because the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Authenticating the key&lt;/h2&gt;

&lt;p&gt;Because someone can easily create a forged key, you need to
authenticate the key. We'll cover authentication in another post in
the future. For the purposes of this discussion, lets be hand-wavy
about that and assume that you've somehow authenticated the key.&lt;/p&gt;

&lt;h2&gt;Signing the key&lt;/h2&gt;

&lt;p&gt;All OpenPGP 'settings' are stored as digital signatures.  If you trust
a key is authentic, you sign a little document saying so.  If you want
to expire an old key, you sign a little document saying so.  If
settings were just stored in a file, then someone who has compromised
your computer could just change the &lt;code&gt;trusted_keys.txt&lt;/code&gt; file.  A
signature requires control of the private key which is usually
encrypted.&lt;/p&gt;

&lt;p&gt;Now that you've authenticated the key you want to sign the key. This
issues a little signed document saying you believe this is indeed the
correct key for the given user.&lt;/p&gt;

&lt;p&gt;But before you do that, you'll need to generate a gpg key if you
haven't already.&lt;/p&gt;

&lt;h3&gt;Generating your signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part you can follow the defaults.  I'll write in more
detail about generating keys in another post, but for now lets just
keep moving and generate a key quickly using the defaults.&lt;/p&gt;

&lt;h3&gt;Signing the test package author's key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --lsign 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying against the authenticated key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you'll see that the signature is verified &lt;strong&gt;and&lt;/strong&gt; trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The warning is gone and the gem installs.&lt;/p&gt;

&lt;h2&gt;Congratulations, you've just authenticated your first gem!&lt;/h2&gt;

&lt;p&gt;That's all there is to it.  And it's all well and good for a single
gem.  But the process doesn't scale very well.  You need to verify the
key for the developers of every gem you need to use.  In a complex
project that can number in the hundreds.&lt;/p&gt;

&lt;p&gt;A certificate authority steps in as a trusted third-party, issuing
its own signatures against developer keys that it trusts.  Now you, as
the user, only need to decide to authenticate and trust the
certificate authority instead of 100's of individual developers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;./the-complete-guide-to-signing-the-certificate-authority-keys.html&quot;&gt;The Complete Guide to Signing the Certificate Authority Keys&lt;/a&gt;,
we describe how to configure your system to trust the
rubygems-openpgp-ca keys, hopefully making the authentication process
easier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.4 Released</title>
   <link href="http://rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.4 Released&lt;/h1&gt;

&lt;h2&gt;Now with Trust!&lt;/h2&gt;

&lt;p&gt;Previous versions could only verify signatures.  They didn't take your
gnupg trust settings into account.  You can now provide the &lt;code&gt;--trust&lt;/code&gt;
flag and gems will only be installed if you trust the signing key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the install fail if the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Learn more at &lt;a href=&quot;./the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html&quot;&gt;The Complete Guide to Verifying Gems with
rubygems-openpgp&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Release Signature&lt;/h2&gt;

&lt;p&gt;Previous users of rubygems-openpgp should be able to verify this
release with rubygems-openpgp.  New users may want to manually check
the initial install.&lt;/p&gt;

&lt;p&gt;Save the release signature locally and then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem fetch rubygems-openpgp
gpg --verify saved_sig.asc rubygems-openpgp-0.4.0.gem
gem install rubygems-openpgp-0.4.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The release signature for 0.4.0 is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.17 (Darwin)

iQEcBAABCgAGBQJRKNPSAAoJEP5F5V2hilTWMS4IAIfrL21CuSrZCof8UcrFPZds
LvCEhBKbfE4aB4Jgf8QBc6PXrm916TU8+IcfhWVzHc98ENRui+xUVtJ1LOF7tx31
eUcck9VqGZQ7RkI9GpX5Dcbj+0SzL3ghVgVv+UMttwwAahqT8VXvPlS6ttHjroqD
87flVoUED/MNFeT8AfGvDp4IOJ+lQl8Y7x6JUJJv+OCOSnG6e/xtQZcMaTf9LKWW
z6FO9iplsjbLdwCndKjbPT6bygYRmw8/mF/t3DSJb7wf4HbFjLri24TkwNVZ5o9T
hiUjubQJuZrjVTqpaPW7ZF0iL/0xgERCz7gN6SsvIM5MIm3Hok1oZ2oVMS8fzZQ=
=RUfl
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>How Many People Need to Verify Software to Make Signing Useful?</title>
   <link href="http://rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful.html"/>
   <updated>2013-02-22T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful</id>
   <content type="html">&lt;h1&gt;How Many People Need to Verify Software to Make Signing Useful?&lt;/h1&gt;

&lt;h2&gt;Lets do a quick straw poll.&lt;/h2&gt;

&lt;p&gt;Raise your hand if you're concerned with being able to verify
software.  I imagine everyone has their hands up now.  After all,
this site is dedicated to software verification.&lt;/p&gt;

&lt;p&gt;Keep your hand up if you've ever downloaded a linux distribution from
the web.  I imagine a few hands dropped, but we're all software
developers here, and most of us have probably played with linux.&lt;/p&gt;

&lt;p&gt;Now keep your hand up if you actually checked the checksums on the ISO
image you downloaded to verify the image.  What? Did a few hands just
drop there?&lt;/p&gt;

&lt;p&gt;For those of you with your hands still up, did you actually check the
OpenPGP signature of the checksum file you downloaded?  Nope?  Drop
your hands.  I imagine we just about lost everyone there.&lt;/p&gt;

&lt;p&gt;And now we're left with the few and the proud.  The ones that followed
the full process.  And I've got one question for you heroes among men.
How many of you performed any meaningful authentication on the signing
keys?  If you just grabbed the key from the keyservers without any
thought put your hand down.&lt;/p&gt;

&lt;p&gt;Does anyone still have their hand up?  Maybe one or two people if
we're lucky.&lt;/p&gt;

&lt;h2&gt;Those checksums and signatures must be useless...&lt;/h2&gt;

&lt;p&gt;I don't believe so.&lt;/p&gt;

&lt;p&gt;Less and less people followed along at each step in the above
verification process.  I imagine if we were able to get real numbers
and draw a chart, we'd basically see exponential decay.  Most people
won't perform any verification.  Some people will perform some
verification.  And a small few will go through a full verification of
the software.&lt;/p&gt;

&lt;p&gt;For a distribution as popular as Ubuntu, that is probably enough.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Linus%27s_Law&quot;&gt;Linus' Law&lt;/a&gt; states that
&quot;given enough eyeballs, all bugs are shallow.&quot;  The same holds true
for a software compromise, assuming that proper validation tools are
in place.  Most people just don't care at all.  Some are moderately
security conscious.  A few are highly conscious.&lt;/p&gt;

&lt;h2&gt;But the proud brave few can't verify at all without tools&lt;/h2&gt;

&lt;p&gt;Even if you, as a security conscious user, wants to verify your
software packages, it's up to the developer and/or distributor to
provide the tools for you to do so.  That user needs a signature and a
way to verify the signing key.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp aims to provide new tools that the users who choose to
can use now.  The existing solution has been around since July 2005
and has seen basically no adoption for a variety of reasons that I
won't get into here.  (And in fairness, I suggest you try signing and
verifying a gem both with the existing tools and rubygems-openpgp and
decide for yourself what is better.)&lt;/p&gt;

&lt;h2&gt;But not everyone everywhere can use rubygems-openpgp today&lt;/h2&gt;

&lt;p&gt;By far the biggest complaint about rubygems-openpgp is that it
currently uses gpg as the back end.  This is additional software that
(for example) a Windows user would need to install to take advantage
of software verification.&lt;/p&gt;

&lt;p&gt;Keep in mind that a user in this context is a software developer, it's
not the stereotypical grandma who can't even use a smart phone.  And
that signing and verifying is completely optional.  Nothing breaks if
you choose not to use it.&lt;/p&gt;

&lt;p&gt;But I'll save that argument for another time.&lt;/p&gt;

&lt;h2&gt;Back to the original question&lt;/h2&gt;

&lt;p&gt;How many people need to verify software to make signing useful?&lt;/p&gt;

&lt;p&gt;I don't believe we need to have 100% of people verifying software to
make signing useful.  I also believe that having a number greater than
what we have now, which is effectively 0%, is useful.  I don't buy the
argument that because some people can't or won't verify software, we
shouldn't let anyone verify software.&lt;/p&gt;

&lt;p&gt;I also believe that once some people start using software, any
software, it will find itself being improved.  As time goes on, these
improvements make it easier to use by less interested people.  I
believe once 1% of gem users sign and verify software, it won't be
long before the tools are good enough for 2%, and then 4%, and so on
and so on.&lt;/p&gt;

&lt;h2&gt;So start signing your gems&lt;/h2&gt;

&lt;p&gt;This is the first step in the journey of a thousand miles.  The tools
are there.  But developers need to sign their gems before users can
verify them.&lt;/p&gt;

&lt;p&gt;And I'm not just talking rubygems-openpgp here.  Give the integrated
signing a try too. In fact, rubygems-openpgp isn't incompatible with
the existing solution.  You can sign with both solutions if you want.&lt;/p&gt;

&lt;p&gt;Please just give it a try...&lt;/p&gt;
</content>
 </entry>
 
 
</feed>