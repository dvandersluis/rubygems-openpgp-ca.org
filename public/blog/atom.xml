<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>rubygems-openpgp Certificate Authority</title>
 <link href="http://rubygems-openpgp-ca.org/blog/atom.xml" rel="self"/>
 <link href="http://rubygems-openpgp-ca.org/"/>
 <updated>2013-02-23T09:44:17-05:00</updated>
 <id>http://rubygems-openpgp-ca.org/blog</id>
 <author>
   <name>rubygems-openpgp Certificate Authority</name>
 </author>

 
 <entry>
   <title>The Complete Guide to Verifying Gems with rubygems-openpgp</title>
   <link href="http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Verifying Gems with rubygems-openpgp&lt;/h1&gt;

&lt;p&gt;rubygems-openpgp allows you to verify a gem by checking the digital
signature.  This helps to ensure that the gem you are using is
actually the gem published by the author and that it hasn't been
replaced with malicious code.&lt;/p&gt;

&lt;p&gt;Gem users can verify their gems with a few simple steps.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;h3&gt;Install the rubygems plugin&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Install gpg if not installed.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gpg4win.org&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gpgtools.org/&quot;&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux - installed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure if you need to? Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Install and verify the test gem&lt;/h2&gt;

&lt;p&gt;There is a signed version of the hola gem on rubygems.org.  Try to
install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will probably fail with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:red;'&gt;You don't have the public key.  Use --get-key to automagically retrieve from keyservers
Fail!&lt;/span&gt;
ERROR:  Fail!
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is because you don't have the user's public signing key yet. This
is required to verify the signature. Try again with an extra option to
retrieve the public key automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --get-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will retrieve the key and the signature can be verified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F isGOODSIG, VALIDSIG and TRUST_UNDEFINED
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Note that we were able to verify the signature, but it's listed as
&lt;strong&gt;TRUST_UNDEFINED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is because even though you've downloaded the key, you have no
idea if it is authentic. Anyone can make a key with any email and
upload it. (In fact there are several forged keys out there now that
are
&lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&amp;amp;search=president%40whitehouse.gov&amp;amp;fingerprint=on&quot;&gt;attributed to president@whitehouse.gov&lt;/a&gt;
.)  Hence the lack of trust.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp has a &lt;code&gt;--trust&lt;/code&gt; flag that will make sure you only
install trusted gems.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will fail because the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F isGOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Authenticating the key&lt;/h2&gt;

&lt;p&gt;Because someone can easily create a forged key, you need to
authenticate the key. We'll cover authentication in another post in
the future. For the purposes of this discussion, lets be hand-wavy
about that and assume that you've somehow authenticated the key.&lt;/p&gt;

&lt;h2&gt;Signing the key&lt;/h2&gt;

&lt;p&gt;Now that you've authenticated the key you want to sign the key. This
is done by issuing a cryptographic signature saying that you believe
this is the correct key.&lt;/p&gt;

&lt;p&gt;But before you do that, you'll need to generate a gpg key if you
haven't already.&lt;/p&gt;

&lt;h3&gt;Generating your signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part you can follow the defaults.  I'll write in more
detail about generating keys in another post, but for now lets just
keep moving and generate a key quickly.&lt;/p&gt;

&lt;h3&gt;Signing the test package author's key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --lsign 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying against the authenticated key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you'll see that the signature is verified &lt;strong&gt;and&lt;/strong&gt; trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The warning is gone and the gem installs.&lt;/p&gt;

&lt;h2&gt;Congratulations, you've just authenticated your first gem!&lt;/h2&gt;

&lt;p&gt;That's all there is to it.  And it's all well and good for a single
gem.  But the process doesn't scale very well.  You need to verify the
key for the developers of every gem you need to use.  In a complex
project that can number in the hundreds.&lt;/p&gt;

&lt;p&gt;A certificate authority steps in as a trusted third-party, issuing
its own signatures against developer keys that it trusts.  Now you, as
the user, only need to decide to authenticate and trust the
certificate authority instead of 100's of individual developers.&lt;/p&gt;

&lt;p&gt;In another post, we'll describe how to configure your system to trust
the rubygems-openpgp-ca keys, hopefully making the authentication
process easier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.4 Released</title>
   <link href="http://rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.4 Released&lt;/h1&gt;

&lt;h2&gt;Now with Trust!&lt;/h2&gt;

&lt;p&gt;Previous versions could only verify signatures.  They didn't take your
gnupg trust settings into account.  You can now provide the &lt;code&gt;--trust&lt;/code&gt;
flag and gems will only be installed if you trust the signing key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the install fail if the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F isGOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Learn more at &lt;a href=&quot;./the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html&quot;&gt;The Complete Guide to Verifying Gems with
rubygems-openpgp&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Release Signature&lt;/h2&gt;

&lt;p&gt;Previous users of rubygems-openpgp should be able to verify this
release with rubygems-openpgp.  New users may want to manually check
the initial install.&lt;/p&gt;

&lt;p&gt;Save the release signature locally and then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem fetch rubygems-openpgp
gpg --verify saved_sig.asc rubygems-openpgp-0.4.0.gem
gem install rubygems-openpgp-0.4.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The release signature for 0.4.0 is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.17 (Darwin)

iQEcBAABCgAGBQJRKNPSAAoJEP5F5V2hilTWMS4IAIfrL21CuSrZCof8UcrFPZds
LvCEhBKbfE4aB4Jgf8QBc6PXrm916TU8+IcfhWVzHc98ENRui+xUVtJ1LOF7tx31
eUcck9VqGZQ7RkI9GpX5Dcbj+0SzL3ghVgVv+UMttwwAahqT8VXvPlS6ttHjroqD
87flVoUED/MNFeT8AfGvDp4IOJ+lQl8Y7x6JUJJv+OCOSnG6e/xtQZcMaTf9LKWW
z6FO9iplsjbLdwCndKjbPT6bygYRmw8/mF/t3DSJb7wf4HbFjLri24TkwNVZ5o9T
hiUjubQJuZrjVTqpaPW7ZF0iL/0xgERCz7gN6SsvIM5MIm3Hok1oZ2oVMS8fzZQ=
=RUfl
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>How Many People Need to Verify Software to Make Signing Useful?</title>
   <link href="http://rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful.html"/>
   <updated>2013-02-22T00:00:00-05:00</updated>
   <id>http://rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful</id>
   <content type="html">&lt;h1&gt;How Many People Need to Verify Software to Make Signing Useful?&lt;/h1&gt;

&lt;h2&gt;Lets do a quick straw poll.&lt;/h2&gt;

&lt;p&gt;Raise your hand if you're concerned with being able to verify
software.  I imagine everyone has their hands up now.  After all,
this site is dedicated to software verification.&lt;/p&gt;

&lt;p&gt;Keep your hand up if you've ever downloaded a linux distribution from
the web.  I imagine a few hands dropped, but we're all software
developers here, and most of us have probably played with linux.&lt;/p&gt;

&lt;p&gt;Now keep your hand up if you actually checked the checksums on the ISO
image you downloaded to verify the image.  What? Did a few hands just
drop there?&lt;/p&gt;

&lt;p&gt;For those of you with your hands still up, did you actually check the
OpenPGP signature of the checksum file you downloaded?  Nope?  Drop
your hands.  I imagine we just about lost everyone there.&lt;/p&gt;

&lt;p&gt;And now we're left with the few and the proud.  The ones that followed
the full process.  And I've got one question for you heroes among men.
How many of you performed any meaningful authentication on the signing
keys?  If you just grabbed the key from the keyservers without any
thought put your hand down.&lt;/p&gt;

&lt;p&gt;Does anyone still have their hand up?  Maybe one or two people if
we're lucky.&lt;/p&gt;

&lt;h2&gt;Those checksums and signatures must be useless...&lt;/h2&gt;

&lt;p&gt;I don't believe so.&lt;/p&gt;

&lt;p&gt;Less and less people followed along at each step in the above
verification process.  I imagine if we were able to get real numbers
and draw a chart, we'd basically see exponential decay.  Most people
won't perform any verification.  Some people will perform some
verification.  And a small few will go through a full verification of
the software.&lt;/p&gt;

&lt;p&gt;For a distribution as popular as Ubuntu, that is probably enough.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Linus%27s_Law&quot;&gt;Linus' Law&lt;/a&gt; states that
&quot;given enough eyeballs, all bugs are shallow.&quot;  The same holds true
for a software compromise, assuming that proper validation tools are
in place.  Most people just don't care at all.  Some are moderately
security conscious.  A few are highly conscious.&lt;/p&gt;

&lt;h2&gt;But the proud brave few can't verify at all without tools&lt;/h2&gt;

&lt;p&gt;Even if you, as a security conscious user, wants to verify your
software packages, it's up to the developer and/or distributor to
provide the tools for you to do so.  That user needs a signature and a
way to verify the signing key.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp aims to provide new tools that the users who choose to
can use now.  The existing solution has been around since July 2005
and has seen basically no adoption for a variety of reasons that I
won't get into here.  (And in fairness, I suggest you try signing and
verifying a gem both with the existing tools and rubygems-openpgp and
decide for yourself what is better.)&lt;/p&gt;

&lt;h2&gt;But not everyone everywhere can use rubygems-openpgp today&lt;/h2&gt;

&lt;p&gt;By far the biggest complaint about rubygems-openpgp is that it
currently uses gpg as the back end.  This is additional software that
(for example) a Windows user would need to install to take advantage
of software verification.&lt;/p&gt;

&lt;p&gt;Keep in mind that a user in this context is a software developer, it's
not the stereotypical grandma who can't even use a smart phone.  And
that signing and verifying is completely optional.  Nothing breaks if
you choose not to use it.&lt;/p&gt;

&lt;p&gt;But I'll save that argument for another time.&lt;/p&gt;

&lt;h2&gt;Back to the original question&lt;/h2&gt;

&lt;p&gt;How many people need to verify software to make signing useful?&lt;/p&gt;

&lt;p&gt;I don't believe we need to have 100% of people verifying software to
make signing useful.  I also believe that having a number greater than
what we have now, which is effectively 0%, is useful.  I don't buy the
argument that because some people can't or won't verify software, we
shouldn't let anyone verify software.&lt;/p&gt;

&lt;p&gt;I also believe that once some people start using software, any
software, it will find itself being improved.  As time goes on, these
improvements make it easier to use by less interested people.  I
believe once 1% of gem users sign and verify software, it won't be
long before the tools are good enough for 2%, and then 4%, and so on
and so on.&lt;/p&gt;

&lt;h2&gt;So start signing your gems&lt;/h2&gt;

&lt;p&gt;This is the first step in the journey of a thousand miles.  The tools
are there.  But developers need to sign their gems before users can
verify them.&lt;/p&gt;

&lt;p&gt;And I'm not just talking rubygems-openpgp here.  Give the integrated
signing a try too. In fact, rubygems-openpgp isn't incompatible with
the existing solution.  You can sign with both solutions if you want.&lt;/p&gt;

&lt;p&gt;Please just give it a try...&lt;/p&gt;
</content>
 </entry>
 
 
</feed>