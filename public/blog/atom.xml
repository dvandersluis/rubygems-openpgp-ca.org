<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>rubygems-openpgp Certificate Authority</title>
 <link href="https://www.rubygems-openpgp-ca.org/blog/atom.xml" rel="self"/>
 <link href="https://www.rubygems-openpgp-ca.org/"/>
 <updated>2013-03-20T20:07:03-04:00</updated>
 <id>https://www.rubygems-openpgp-ca.org/blog</id>
 <author>
   <name>rubygems-openpgp Certificate Authority</name>
 </author>

 
 <entry>
   <title>Should Users Be Encouraged to Run `gem cert --add`?</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/should-users-be-encouraged-to-run-gem-cert-add.html"/>
   <updated>2013-03-21T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/should-users-be-encouraged-to-run-gem-cert-add</id>
   <content type="html">&lt;h1&gt;Should Users Be Encouraged to Run &lt;code&gt;gem cert --add&lt;/code&gt;?&lt;/h1&gt;

&lt;p&gt;People who are signing gems today via the built-in signing are using
self-signed certificates.  In general this is a bad idea.  That's why
your web browser will give you a nasty warning if you go to an https
site that uses a self-signed certificate.  A self-signed certificate
is the digital equivalent of saying, &quot;Dude! Of course I'm 21! Why
would I make that up?&quot;&lt;/p&gt;

&lt;p&gt;But there's an even bigger problem with this approach than simply side
stepping the whole issue of authentication.  Some people are starting
to put their certificates on github or their personal web page.  Then
a user is instructed to install it with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://github.com/blah/blah/user.crt &amp;gt; user.crt
gem cert --add user.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The notion is that if you get the certificate from github, and the gem
from rubygems.org, there isn't much likelihood of both delivery
mechanisms being compromised.  Lets assume for the moment that this is
a decent assumption.  You the user can get install the certificate as
listed above and then install an authenticated version of the gem
with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install -P HighSecurity foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything's good, right?&lt;/p&gt;

&lt;p&gt;Nope.  There's a problem.  Now that you've trusted the certificate,
you trust it globally.  This is understood but glossed over in any
documentation.  Most users don't realize the implications of adding a
trusted certificate to their system.&lt;/p&gt;

&lt;h2&gt;When You Add a Certificate, You're Not Saying You Trust the Authenticity of the Software Package, You're Saying You Completely Trust the Owner&lt;/h2&gt;

&lt;p&gt;You might have imported that certificate for a json parser you like.
And that json parser might be a fine piece of software.  But now the
holder of that certificate can sign anything and you'll accept it as
trusted.  They can make their own version or rake, rails, rspec, etc,
and get you to install it in the impressive-sounding HighSecurity mode
without even providing a warning.&lt;/p&gt;

&lt;p&gt;Now of course for this to work an attacker would need to somehow get
you to download the forged version of the software.  This is easier
said than done.  But the whole reason you're checking signatures in
the first place is to catch exploits such as that.&lt;/p&gt;

&lt;p&gt;See my gem &lt;a href=&quot;https://github.com/grant-olson/nillify&quot;&gt;nillify&lt;/a&gt; for a
demonstration of the potential exploit.  The first part of the readme
makes it seem like installing my certificate will make you the gem
user more secure.  And it will, but only if you have reason to believe
that I'm trustworthy.  It won't help if you've just stumbled onto the
github page and have no idea who I really am.&lt;/p&gt;

&lt;h2&gt;A Better Solution - Per-Resource Trust&lt;/h2&gt;

&lt;p&gt;A better solution is per-resource trust.  Instead of declaring that
you trust a particular certificate globally for all things, what you
really want to be able to say is:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I trust that this certificate belongs to the author of this
particular gem I'm using.  If the gem is signed by this certificate
I'll consider it to be authentic.  If it is unsigned or signed by
another certificate I will not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Of Course This Was All Really a Sales Pitch for rubygems-openpgp&lt;/h2&gt;

&lt;p&gt;As of &lt;a href=&quot;/blog/rubygems-openpgp-0.6.0-released.html&quot;&gt;release 0.6.0&lt;/a&gt;
rubygems-openpgp will query rubygems.org to determine a list of owners
for a given gem.  These are the people who are authorized to publish
it.  It will then validate that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The signing key has a user id containing the email of an owner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That the above key and user id has been authenticated by you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This restricts your trust in any given key to a set of particular
resources instead of establishing an all-or-nothing trust scenario.&lt;/p&gt;

&lt;h2&gt;So&lt;/h2&gt;

&lt;p&gt;Sign and verify your gems.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.6.0 Released</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.6.0-released.html"/>
   <updated>2013-03-18T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.6.0-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.6.0 Released&lt;/h1&gt;

&lt;p&gt;rubygems-openpgp is a rubygems plugin that allows you to sign and
verify your gems with OpenPGP.&lt;/p&gt;

&lt;p&gt;Verifying is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Signing is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem build foo.gemspec --sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Now With rubygems.org Owner Verification Checks&lt;/h2&gt;

&lt;p&gt;When verifying a gem we now query rubygems.org for a list of valid gem
owners and ensure that the gem's signature comes from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the listed owners at rubygems.org.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Via a UID that has been authenticated by the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This prevents a few potential exploits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Previously a user could get you to authenticate their key for a
legitimate gem, somehow deliver an illegitimate gem, and you would
have trusted the signature.&lt;/p&gt;

&lt;p&gt;The owner verification check will now fail because this particular
user doesn't have rights on this particular gem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A user could get you to authenticate their key for a legitimate
gem via an innocuous email address such as foo123@gmail.com and
then later add a UID for a known user like dhh@37signals in an
attempt to obfuscate the signing key's origin.&lt;/p&gt;

&lt;p&gt;The owner verification check will now ignore the new forged email
address because it hasn't been authenticated by the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Verification can be shut off with the flag &lt;code&gt;--ignore-owner-check&lt;/code&gt; if
(for example) you're installing a gem without a network connection.&lt;/p&gt;

&lt;h2&gt;Other Minor Improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;--trust now automatically assumes that you want to verify.  You
don't need both flags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We provide installer links if we can't detect a working copy of
gpg.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added --trust option to the &lt;code&gt;gem verify&lt;/code&gt; command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We properly display OpenPGP short ids as 8 characters of hex, not
nine.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Learn More at the rubygems-openpgp Certificate Authority&lt;/h2&gt;

&lt;p&gt;Several guides, walkthroughs, and documents explaining my motivations
are available at the &lt;a href=&quot;https://www.rubygems-openpgp-ca.org&quot;&gt;rubygems-openpgp Certificate
Authority&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that use of the Certificate Authority itself is entirely
optional; users of rubygems-openpgp can apply whatever trust model
they wish when verifying gems.&lt;/p&gt;

&lt;h2&gt;Verifying Your Initial Install&lt;/h2&gt;

&lt;p&gt;Existing users of rubygems-openpgp can verify the install with
rubygems-openpgp itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended that new users fetch the gem and verify it against a
detached signature.  Instructions on how to do so can be found at the
&lt;a href=&quot;/blog/the-complete-guide-to-verifying-your-initial-install.html&quot;&gt;Guide to Verifying Your Initial Install&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Detached signature for the 0.6.0 release&lt;/h3&gt;

&lt;pre&gt;
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.17 (GNU/Linux)

iQEcBAABAgAGBQJRRf0qAAoJEP5F5V2hilTWnhwIAIeCxmyiUT4C7/VPLvpwPypX
IGrhaA3hZZzknAh2MxKx+OPiWDt7ynvSlfdbdYbkSbiKv4ho4husLrhfGV7COKws
HImXCE4SF+Zhb2WifI7haSCRfrZ4M0z/4adalcB4GpkDRmRYuw1RI92PDLOADLSD
u80FPfEF2ekRJqFAUU1Ayzpl8MCfl8e6uzj2CZ8CKtceApb6HZbdWA/jhvuIjXXM
tJDAE22rugFw8ba6e9iinFHYpo9XYMG551YzR70lAqWXtxjgAM3jVDGlAXpkQGxM
9WTas7RRYmLH1h+JvB/DFR61oZaC3gzBP1IS42KOnXywwcq/rK6/CltPf6MZtco=
=aA4r
-----END PGP SIGNATURE-----
&lt;/pre&gt;


&lt;h2&gt;Enjoy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Signing Specification</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/signing-specification.html"/>
   <updated>2013-03-16T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/signing-specification</id>
   <content type="html">&lt;h1&gt;Signing Specification&lt;/h1&gt;

&lt;p&gt;Here's some brief documentation on the file format for OpenPGP
signing.  With it you should know enough to be able to either manually
verify or build signed gems without using rubygems-openpgp itself.&lt;/p&gt;

&lt;h2&gt;Basic .gem format&lt;/h2&gt;

&lt;p&gt;A gem is actually a tar-file.  If you use tar to extract it you will
extract payload files: &lt;code&gt;data.tar.gz&lt;/code&gt; and &lt;code&gt;metadata.gz&lt;/code&gt;.  Rubygems 2.0
also adds in &lt;code&gt;checksums.yaml.gz&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;X.509 signatures&lt;/h2&gt;

&lt;p&gt;If a gem has X.509 signatures they are simply generated for each of
the real payload files, creating &lt;code&gt;data.tar.gz.sig&lt;/code&gt;, &lt;code&gt;metadata.gz.sig&lt;/code&gt;,
and (on rubygems 2.0) &lt;code&gt;checksums.yaml.gz.sig&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;OpenPGP signatures&lt;/h2&gt;

&lt;p&gt;OpenPGP signatures are generated for the payload files only.  There is
no point in re-signing the X.509 signatures.  Signatures are
ascii-armored and saved with the .asc extension.&lt;/p&gt;

&lt;p&gt;These are the exact same files that would be generated if you ran:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --armor --detach-sign data.tar.gz
gpg --armor --detach-sign metadata.gz
gpg --armor --detach-sign checksums.yaml.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Full file formats&lt;/h2&gt;

&lt;h3&gt;Rubygems 1.8-style gem&lt;/h3&gt;

&lt;pre&gt;
+ foo.gem
\
 +- data.tar.gz
 +- &lt;b&gt;data.tar.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- metadata.gz
 +- &lt;b&gt;metadata.gz.asc&lt;/b&gt; [OpenPGP Sig]
&lt;/pre&gt;


&lt;h3&gt;Rubygems 1.8-style gem - X.509 Signed&lt;/h3&gt;

&lt;pre&gt;
+ foo.gem
\
 +- data.tar.gz
 +- data.tar.gz.sig [X.509 Sig]
 +- &lt;b&gt;data.tar.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- metadata.gz
 +- metadata.gz.sig [X.509 Sig]
 +- &lt;b&gt;metadata.gz.asc&lt;/b&gt; [OpenPGP Sig]
&lt;/pre&gt;


&lt;h3&gt;Rubygems 2.0-style gem&lt;/h3&gt;

&lt;pre&gt;
+ foo.gem
\
 +- data.tar.gz
 +- &lt;b&gt;data.tar.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- metadata.gz
 +- &lt;b&gt;metadata.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- checksums.yaml.gz
 +- &lt;b&gt;checksums.yaml.gz.asc&lt;/b&gt; [OpenPGP Sig]
&lt;/pre&gt;


&lt;h3&gt;Rubygems 2.0-style gem - X509 Signed&lt;/h3&gt;

&lt;pre&gt;
+ foo.gem
\
 +- data.tar.gz
 +- data.tar.gz.sig [X.509 Sig]
 +- &lt;b&gt;data.tar.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- metadata.gz
 +- metadata.gz.sig [X.509 Sig]
 +- &lt;b&gt;metadata.gz.asc&lt;/b&gt; [OpenPGP Sig]
 +- checksums.yaml.gz
 +- checksums.yaml.gz.sig[X.509 Sig]
 +- &lt;b&gt;checksums.yaml.gz.asc&lt;/b&gt; [OpenPGP Sig]
&lt;/pre&gt;



</content>
 </entry>
 
 <entry>
   <title>Change to Authentication Policy</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/change-to-authentication-policy.html"/>
   <updated>2013-03-16T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/change-to-authentication-policy</id>
   <content type="html">&lt;h1&gt;Change to Authentication Policy&lt;/h1&gt;

&lt;p&gt;Our previous authentication policy required that you registered with
the same email address as your rubygems.org account.  The &lt;em&gt;intent&lt;/em&gt; was
to demonstrate that you were authorized to publish to the rubygems
account.&lt;/p&gt;

&lt;p&gt;We've run into a few cases where this wasn't practical.  In one case a
user wanted to use an
&lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?op=index&amp;amp;search=software-signing%40phusion.nl&quot;&gt;organizational key&lt;/a&gt;
that wasn't tied to the actual rubygems.org user email.  In a few
other cases, users had previously registered with legacy emails and
were unable to change them.&lt;/p&gt;

&lt;p&gt;Since the &lt;em&gt;intent&lt;/em&gt; was to demonstrate that a user was authorized to
publish to that account, we've added an alternate way to demonstrate
this.  Simply publish a gem signed by your signing key to rubygems.org
prior to applying for certification.  This demonstrates that you are
indeed able to publish to your account.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CA Exploited by Uber-Hacker Havenwood! -or- How Revocation Works</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/ca-exploited-by-uber-hacker-havenwood.html"/>
   <updated>2013-03-14T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/ca-exploited-by-uber-hacker-havenwood</id>
   <content type="html">&lt;h1&gt;CA Exploited by Uber-Hacker Havenwood!&lt;/h1&gt;

&lt;p&gt;On Feb-20-2013 at approximately 10:00 GMT a mysterious user known only
as &lt;a href=&quot;https://github.com/havenwood&quot;&gt;Havenwood&lt;/a&gt; was able to bypass
several layers of security and receive certification from the
authority without proper authentication.&lt;/p&gt;

&lt;p&gt;He is believed to be a Caucasian male, between fifteen to fifty years
old, four to six feet high, weighing between one and three hundred
pounds.  If you have any information about his whereabouts, please
contact us.  If you encounter him in person, contact your local
authorities.  Do not attempt to apprehend him yourself.  He is rumored
to be armed and extremely dangerous.&lt;/p&gt;

&lt;h3&gt;Actually, That's Not Quite What Happened&lt;/h3&gt;

&lt;p&gt;Havenwood submitted an application for certification.  Because of a
bug in the code, we did not realize that he never actually confirmed
his account, which meant that he never demonstrated that he actually
controlled the submitted private key.  In spite of this, we signed off
on his key.&lt;/p&gt;

&lt;h3&gt;Game Over?&lt;/h3&gt;

&lt;p&gt;Nope.  If we've issued a signature in error, or later decide that a
previously authenticated user has malicious intent, we can revoke our
certification.&lt;/p&gt;

&lt;h2&gt;How Revocation Works&lt;/h2&gt;

&lt;p&gt;Once the problem was discovered we were able to issue a revocation of
the original signature and send it off to the keyservers.  You can see
the
&lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&amp;amp;fingerprint=on&amp;amp;search=0xCF61546750DBC4B4&quot;&gt;revocation on pool.sks-keyservers.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The line starting including &lt;strong&gt;revoke&lt;/strong&gt; indicates our original signature
has been revoked.  You will no longer trust the authenticity of
Havenwood's key, at least based on our signature.  If you've
authenticated the key via other means, you'll still trust that and
ignore our revocation.&lt;/p&gt;

&lt;h2&gt;How Do Users Get the Revocation Certificate?&lt;/h2&gt;

&lt;p&gt;For this revocation to take effect users would need to pull the
revocation down from the keyserver network.  If they've previously
downloaded the key and they never refresh it, they'll never know we
revoked our certification.&lt;/p&gt;

&lt;p&gt;To encourage good keyring hygiene we've setup a rotating expiration
date on our signing key.  On May 17th, 2013 the signing key will
expire.  At that time we will bump up the expiration date and publish
this information.&lt;/p&gt;

&lt;p&gt;If a user hasn't been keeping their keyring up-to-date, authentication
of users we have certified would start failing on their machine
because the system will think our signing key is expired.  They would
need to refresh their keyring by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --refresh-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Performing this operation will grab an updated expiration date for our
signing key.  It will also grab our revocation of our signature
against Havenwood's key.  Any attempt to install software signed by
this key with the &lt;code&gt;--trust&lt;/code&gt; option would now fail as the key will no
longer be trusted.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;(This example assumes you've already trusted our keys as described in
&lt;a href=&quot;/blog/the-complete-guide-to-signing-the-certificate-authority-keys.html&quot;&gt;The Complete Guide to Signing the Certificate Authority Keys&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Get Havenwood's key and examine the signatures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-key 0x50DBC4B4
gpg --list-sigs 0x50DBC4B4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll see that you have both our original signature and the
revocation.&lt;/p&gt;

&lt;p&gt;Here's a message Havenwood signed.  Save this to a file somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This is our world now... the world of the electron and the switch, the beauty of the baud.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.13 (Darwin)

iQIcBAEBAgAGBQJRR1NRAAoJEM9hVGdQ28S00hcQALyHa/3ZpmWY7jwWLoXXZbpc
Pd+MXuH2cmkUBx/Xaeu8FzcNL05svBoZrQn8eJNTRgYN/zD5b8G6eD3a5w4PVO3I
7hP0zN+WRqUBvwuJdq7Ek0cdGNOMU+jGonSCfRhTwTNDBeDWkoIxkiIl+04BmSAD
7kBaHZu0vWbHjWEJkAM26KaE3r/bVYTojVO0D8RKdJ8d6H5nyRW8F3S+b4sHmwXY
hEb9zz1/QkUbU9L4I3I+ag43HAw9ywsTDcWfGk5G3V7aUCWYTMfoIjuEEhQYQAHJ
UcJy0cuJxQtOG6gP3N/x9WSeLmVOleTrJSVuV0CsDw9lR3ALHVZJ5A8HpevKe795
HokoVpwjN4580qKIeRZM2eB+P6sK8CJKXxh8rAqAsgv9TrsfXD8ESKy4iqF0ZS96
wSj5btHLU7Jk511w8wKWLr66fPTLd6wLP/+2Iw5BWntERMPMjICP8erDzw7Lah05
ghiSyj2lifMqwoXe4nznAVmihEjv7tOXE45IlSBc6nBUQxtMMgTzUTuqRbumMLXf
W2TYVYI01Dv/KWjo+XvmLNte8irhIoePRekj/Do0BD9hzYiN6ZrxZw7sgOswo+uV
g+NYUof3jVa2pd7RQo1ihbp0eqrtjQbOf6ZhvbUxu3DDoNkIS8j9DK3kXecoQW1W
A5sPId7OoYQUlId/RprT
=12Qp
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the signature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:~ grant$ gpg foo.txt.asc 
gpg: Signature made Mon Mar 18 13:43:33 2013 EDT using RSA key ID 50DBC4B4
gpg: Good signature from &quot;Shannon Skipper (havenwood) &amp;lt;blah@example.com&amp;gt;&quot;
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 06CB 6789 306C 1DC4 BEAE  ABF1 CF61 5467 50DB C4B4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;strong&gt;WARNING&lt;/strong&gt; lines of text.  This is because we our signature
is no longer included in the calculations.&lt;/p&gt;

&lt;p&gt;If you ran &lt;code&gt;gem install foo --trust&lt;/code&gt; against a gem signed by this key
the operation would now because the key is once again untrusted.&lt;/p&gt;

&lt;p&gt;On the other hand, if you trusted the key by other means, for example
because you knew Havenwood personally, the install would succeed.  Our
revocation doesn't state anything good or bad about Havenwood other
than the fact that you should ignore our previous certification.&lt;/p&gt;

&lt;h2&gt;And that's how our revocation system works&lt;/h2&gt;

&lt;p&gt;Thanks for being a good sport Havenwood.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gems Signed with rubygems-openpgp</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/gems-signed-with-rubygems-openpgp.html"/>
   <updated>2013-03-12T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/gems-signed-with-rubygems-openpgp</id>
   <content type="html">&lt;h1&gt;Gems Signed with rubygems-openpgp&lt;/h1&gt;

&lt;p&gt;This is a list of gems known to be signed by rubygems-openpgp.  Have a
signed gem that's not on the list?  &lt;a href=&quot;mailto:kgo@grant-olson.net&quot;&gt;Let us
know!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/acts_as_textcaptcha&quot;&gt;acts_as_textcaptcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/crash-watch&quot;&gt;crash-watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/daemon_controller&quot;&gt;daemon_controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/default_value_for&quot;&gt;default_value_for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/digest-sha3&quot;&gt;digest-sha3-ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/eurovat&quot;&gt;eurovat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/gpg_status_parser&quot;&gt;gpg_status_parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/henry-container&quot;&gt;henry-container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/migrant&quot;&gt;migrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/mizuho&quot;&gt;mizuho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/openpgp_signed_hola&quot;&gt;openpgp_signed_hola&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/rack-jsonp-middleware&quot;&gt;rack-jsonp-middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/resque-kalashnikov&quot;&gt;resque-kalashnikov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/rubygems-openpgp&quot;&gt;rubygems-openpgp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.5.1 Released</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.5.1-released.html"/>
   <updated>2013-03-11T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.5.1-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.5.1 Released&lt;/h1&gt;

&lt;p&gt;This release corrects a minor issue where a Windows machine couldn't
sign an existing gem built on linux.&lt;/p&gt;

&lt;h2&gt;Verifying Your Initial Install&lt;/h2&gt;

&lt;p&gt;Existing users of rubygems-openpgp can verify the install with
rubygems-openpgp itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended that new users fetch the gem and verify it against a
detached signature.  Instructions on how to do so can be found at the
&lt;a href=&quot;/blog/the-complete-guide-to-verifying-your-initial-install.html&quot;&gt;Guide to Verifying Your Initial Install&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Detached signature for the 0.5.1 release&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAABAgAGBQJRPMTkAAoJEP5F5V2hilTWuBMH/30hvYMpCP6dawq6LwufKTgB
w+hsiII3nRshCo6yicYs8kBsT/7oSc7XZg1q3oHXQgJdal/eLBdVEOXdZ8a7zKPh
SjvuHRSBpei3wA1DjPAvJxqjdGOX883rzDLRtP+pvyzazeO6Fj/8d/c8Y6YArEf5
gwWdaA2s0XXdecH21yWMZPKD3x2YQEARCJJWhyngt+FW5ZHlaAwXPkhpAptzchEe
MC8ThY4WZIPRc3+O9II93wGcNJu3T0sOg5NUzgT6vNLzCOtNLNe/hpD/QWUt/5za
RbwqxGcP0QyNDEZQTVpLTBiiq++qyGRUb7cySTDVBqgwasal19VmVsflhTCbBt0=
=mU3L
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Enjoy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.5.0 Released</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.5.0-released.html"/>
   <updated>2013-03-11T00:00:00-04:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.5.0-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.5.0 Released&lt;/h1&gt;

&lt;p&gt;rubygems-openpgp is a rubygems plugin that allows you to sign and
verify your gems with OpenPGP.&lt;/p&gt;

&lt;p&gt;Verifying is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Signing is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem build foo.gemspec --sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Now with ssh-style Key Continuity Checks!&lt;/h2&gt;

&lt;p&gt;rubygems-openpgp now tracks the keys used to sign your gems and will
error out if the signing key for a given gem has changed.  This works
the same way ssh does when you connect to a host where the key has
changed.&lt;/p&gt;

&lt;p&gt;You can then investigate, and assuming the key change is valid, you
can remove the appropriate entry in ~/.rubygems-openpgp/known_gems to
allow installation to complete.&lt;/p&gt;

&lt;h2&gt;Other Minor Improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gem name is shown before verification status.  Previously it was
confusing to see multiple verification messages when gem
dependencies were verified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generic gpg code was extracted into the gpg_status_parser gem for
easier re-use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Signing/verifying now skips X.509 signatures if they exist.  We only
sign/verify the real payload.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minor improvements for Windows users.  We don't output invalid
unix-style color codes on windows, or print stuff like '~/path' that
doesn't make sense on windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Learn More at the rubygems-openpgp Certificate Authority&lt;/h2&gt;

&lt;p&gt;Several guides, walkthroughs, and documents explaining my motivations
are available at the &lt;a href=&quot;http://www.rubygems-openpgp-ca.org&quot;&gt;rubygems-openpgp Certificate
Authority&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that use of the Certificate Authority itself is entirely
optional; users of rubygems-openpgp can apply whatever trust model
they wish when verifying gems.&lt;/p&gt;

&lt;h2&gt;Verifying Your Initial Install&lt;/h2&gt;

&lt;p&gt;Existing users of rubygems-openpgp can verify the install with
rubygems-openpgp itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended that new users fetch the gem and verify it against a
detached signature.  Instructions on how to do so can be found at the
&lt;a href=&quot;/blog/the-complete-guide-to-verifying-your-initial-install.html&quot;&gt;Guide to Verifying Your Initial Install&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Detached signature for the 0.5.0 release&lt;/h3&gt;

&lt;pre&gt;
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAABAgAGBQJRPJY3AAoJEP5F5V2hilTWVj8H/2R3Ue+4lJxbpZwu/cOodlWb
ApflZwrhOnGHjxswL7cV7Rf15sPP9WHUvNf/n8Cuc4hHKArW7/wwdw1LP4wmrRz4
8RxKx8kR7An9JFvs9HhrDt1BvS/j9moaKn//lZfZV7LPIEEuHEUTCNCtHkuV/oBG
LH9tNSMs1CO1D1kkPyxc2aXZm0mRpygWrS1YskJPy7xdR2aNQk4LHJNF168m+XJH
2l8U29QgoCpD0W4iL+6ooyY2lyVFWYhQbBd7ojVRG16Q8CxUf4+ZNey+3tgchVEP
qBFa4M/+m2LoVdCGPOL8meFMytDR75J4VGWtGmRxjfhBeOeNVhneIQT5C6fHCfw=
=Qxhv
-----END PGP SIGNATURE-----
&lt;/pre&gt;


&lt;h2&gt;Enjoy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Using an OpenPGP Smartcard on Ubuntu 12.10</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/using-openpgp-smartcard-on-ubuntu-12-10.html"/>
   <updated>2013-03-09T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/using-openpgp-smartcard-on-ubuntu-12-10</id>
   <content type="html">&lt;h1&gt;Using an OpenPGP Smartcard on Ubuntu 12.10&lt;/h1&gt;

&lt;p&gt;I'm currently adding a key continuity feature to rubygems-openpgp.  It
works similar to the way that ssh stores copies of known host keys,
and warns you if the key has changed.&lt;/p&gt;

&lt;p&gt;This is the first time I'm trying to store any changes locally, and
was a bit worried about the directories being created properly on
Windows.  So I decided to setup a VirtualBox install of Windows 8.  My
current hard drive was out of space, so that gave me an excuse to buy
a nice new SSD drive.  And that led to installing the latest version
of Ubuntu.  And now my Saturday is almost gone.&lt;/p&gt;

&lt;p&gt;I had a little trouble getting my OpenPGP smartcard setup, so I
thought I'd write about it here.&lt;/p&gt;

&lt;h2&gt;Problem 1 - scdaemon is in the Wrong Package&lt;/h2&gt;

&lt;p&gt;This is actually a problem on the Debian packages that has existed for
many years.  If you want to use gpg2, the scdaemon won't get installed
unless you install the gpgsm package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install gpgsm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That one I was expecting.  But I thought I'd document it here anyway.&lt;/p&gt;

&lt;h2&gt;Problem 2 - Can't Access the Card&lt;/h2&gt;

&lt;p&gt;This one I hadn't seen before:&lt;/p&gt;

&lt;p&gt;I got the following error with gpg2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ gpg2 --card-status
gpg: selecting openpgp failed: Unsupported certificate
gpg: OpenPGP card not available: Unsupported certificate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gpg fails as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ gpg --card-status
gpg: selecting openpgp failed: unknown command
gpg: OpenPGP card not available: general error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were a few areas where this same issue was reported, but I
couldn't find any resolution to the problem.&lt;/p&gt;

&lt;p&gt;After some extensive googling, I was able to find out that the
&lt;code&gt;gnome-keyring-daemon&lt;/code&gt; now decides to grab control of your smartcard
reader.  Sure enough, I killed the process and &lt;code&gt;gpg2 --card-status&lt;/code&gt;
started working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ gpg2 --card-status
Application ID ...: D2760001240102000005000009200000
Version ..........: 2.0
Manufacturer .....: ZeitControl

General key info..: pub  2048R/A18A54D6 2010-03-01 Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;
sec#  2048R/E3B5806F  created: 2010-01-11  expires: 2014-01-03
ssb&amp;gt;  2048R/6A8F7CF6  created: 2010-01-11  expires: 2014-01-03
                      card-no: 0005 00000920
ssb&amp;gt;  2048R/A18A54D6  created: 2010-03-01  expires: 2014-01-03
                      card-no: 0005 00000920
ssb&amp;gt;  2048R/D53982CE  created: 2010-08-31  expires: 2014-01-03
                      card-no: 0005 00000920
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I began the search for ways to disable the smartcard functionality
on &lt;code&gt;gnome-keyring-daemon&lt;/code&gt;.  Couldn't find anything.  There were ways
to switch off its ssh-agent replacement, which I wanted to do anyway
since I ssh authenticate via my smartcard.  There were some other
settings about pkcs11 and secrets that seemed promising.  So I ran the
following commands to disable these features:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gconftool-2 --type bool --set /apps/gnome-keyring/daemon-components/ssh false
gconftool-2 --type bool --set /apps/gnome-keyring/daemon-components/secrets false
gconftool-2 --type bool --set /apps/gnome-keyring/daemon-components/pkcs11 false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But disabling them didn't do the trick.&lt;/p&gt;

&lt;p&gt;Next I went with a hack fix and basically nuked the gnome-keyring-daemon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv /usr/bin/gnome-keyring-daemon /usr/bin/gnome-keyring-daemon.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This didn't &lt;em&gt;seem&lt;/em&gt; to have broken anything too horribly, and I never
liked the gnome keyring or seahorse to begin with.  So I decided to write a blog post for the sake of the interwebz.&lt;/p&gt;

&lt;h2&gt;But Then, A Complication&lt;/h2&gt;

&lt;p&gt;After all that I went to write things up.  I decided to re-break
things so I could obtain the error message that &lt;code&gt;gpg --card-status&lt;/code&gt;
threw.  So I moved the &lt;code&gt;gnome-keyring-daemon&lt;/code&gt; back into place.&lt;/p&gt;

&lt;p&gt;Lo and behold, everything worked!  Both &lt;code&gt;gpg&lt;/code&gt; and &lt;code&gt;gpg2&lt;/code&gt; were able to
access the card just fine.&lt;/p&gt;

&lt;p&gt;I thought that maybe after I configured gpg-agent to act as the
ssh-agent, it was grabbing my smart-card before gnome-keyring-daemon
could.  So I commented out the entries for that, and sure enough card
reading was broken again.&lt;/p&gt;

&lt;h2&gt;The Proper Fix (or is it?)&lt;/h2&gt;

&lt;p&gt;Add this to ~/.gnupg-agent.conf to enable ssh support:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enable-ssh-support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this to ~/.bashrc to use gpg-agent for ssh instead of
gnome-keyring-daemon, substituting your host name:&lt;/p&gt;

&lt;p&gt;if [ -f &quot;${HOME}/.gnupg/gpg-agent-info-HOSTNAME&quot; ]; then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       . &quot;${HOME}/.gnupg/gpg-agent-info-HOSTNAME&quot;
       export GPG_AGENT_INFO
       export SSH_AUTH_SOCK
     fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Another Complication!&lt;/h2&gt;

&lt;p&gt;Everything seemed to be working, but then I got this generic error
message from Enigmail:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No SmartCard 
could not be found in your reader 
Please insert your SmartCard and repeat the operation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After enabling a debug log, it turned out the error was the same
unsupported certificate error I was getting before, even though
signing still worked from the command line.  Killing the
gnome-keyring-daemon process allowed me to sign emails again.&lt;/p&gt;

&lt;p&gt;So, I went back to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv /usr/bin/gnome-keyring-daemon /usr/bin/gnome-keyring-daemon.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And everything seems to be working... for now.&lt;/p&gt;

&lt;h2&gt;That's All for Now&lt;/h2&gt;

&lt;p&gt;If you've encountered the same problem, hopefully this will help.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Key Revocation</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/key-revocation.html"/>
   <updated>2013-03-04T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/key-revocation</id>
   <content type="html">&lt;h1&gt;Key Revocation&lt;/h1&gt;

&lt;p&gt;If your key is compromised or simply lost, you'll need to revoke it.
This relies on generation of a revocation key.&lt;/p&gt;

&lt;h2&gt;Backing Up Your Key and Generating a Revocation Certificate&lt;/h2&gt;

&lt;p&gt;If you are signing your gems and haven't done this yet, please do so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --armor --export-secret-keys &amp;gt; /media/usb_stick/key_backup.asc
gpg --gen-revoke 0xDEADBEEF &amp;gt; /media/usb_stick/key_revoke.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the exported secret key is still encrypted with your
passphrase and relatively safe.  However, the revocation certificate
is not.  if someone gains access to your revocation certificate, they
can revoke your key without any safeguards.&lt;/p&gt;

&lt;h2&gt;Revoking Your Own Key&lt;/h2&gt;

&lt;p&gt;In the event you decide you need to revoke your own key, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --import /media/usb_stick/key_revoke.asc
gpg --keyserver pool.sks-keyservers.net --send-keys 0xDEADBEEF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will publish the revocation.&lt;/p&gt;

&lt;h2&gt;Keeping Your Keyring Up-to-date&lt;/h2&gt;

&lt;p&gt;Even after a revocation has been published, users need to get that
updated information.  To keep your keyring up-to-date, you should
periodically run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --refresh-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will grab any updates for any keys on your keyring.&lt;/p&gt;

&lt;h2&gt;Forcing Users to Keep Their Keyrings Up-to-date&lt;/h2&gt;

&lt;p&gt;One way to force users to update their keyring is to set a revolving
expiration date on your key.  This way the system will tell them the
key is expired and they will need to refresh their keyring to get the
updated expiration information.&lt;/p&gt;

&lt;p&gt;I set my personal key to expire yearly for this reason.  I've also set
the official CA signing key to have a rotating expiration of 60 days
to hopefully force rubygems-openpgp users to keep their keyrings
up-to-date.&lt;/p&gt;

&lt;h2&gt;If All Else Fails, the CA Should be Able to Revoke Its Signature&lt;/h2&gt;

&lt;p&gt;Of course eventually someone is going start signing their gems, fail
to generate backups, and somehow lose their key.  We'll need some way
to revoke the CA's certification signature.  There currently isn't a
policy in place.&lt;/p&gt;

&lt;p&gt;It seems a user should be able to request that we revoke their key.
However, we now end up in a situation where a malicious user only
needs access to a user's email address to reset their password and
issue a revocation.  They would then be able to submit a new signing
key.&lt;/p&gt;

&lt;p&gt;Right now I think the only solution is to have a time-out period after
this revocation is requested.  If we implement the ability to request
revocation via the website only, the signature will be revoked, and
there will be a 60 day cooling off period where we won't accept a new
key.&lt;/p&gt;

&lt;p&gt;This isn't perfect, but it minimizes the amount of damage a malicious
user could do before the actual user realizes their email has been
compromised.&lt;/p&gt;

&lt;h2&gt;What Do You Think?&lt;/h2&gt;

&lt;p&gt;Is the above proposal reasonable?  Is there a better way?  Should we
simply leave revocation in the hands of users and not allow our
certification to be revoked?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Verifying the rubygems-openpgp Source</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/verifying-the-rubygems-openpgp-source.html"/>
   <updated>2013-03-02T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/verifying-the-rubygems-openpgp-source</id>
   <content type="html">&lt;h1&gt;Verifying the rubygems-openpgp Source&lt;/h1&gt;

&lt;p&gt;Verifying gems is all well and good, but what happens if you want to
build rubygems-openpgp from the source on github.  How can you verify
that you have the right source code?  Fortunately git allows you to
digitally sign tags.  All rubygems-openpgp releases are tagged and
signed in the git repository.&lt;/p&gt;

&lt;h2&gt;Getting the Source&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ git clone git://github.com/grant-olson/rubygems-openpgp.git
Cloning into 'rubygems-openpgp'...
remote: Counting objects: 497, done.
remote: Compressing objects: 100% (313/313), done.
remote: Total 497 (delta 252), reused 421 (delta 176)
Receiving objects: 100% (497/497), 74.91 KiB, done.
Resolving deltas: 100% (252/252), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Checking a Release Tag Signature&lt;/h2&gt;

&lt;p&gt;All the standard caveats about authenticating signing keys apply.
This step is only useful if you've authenticated my key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ cd rubygems-openpgp/
grant@johnicicleboy:~/rubygems-openpgp$ git tag -v 0.4.0
object a8f38e7c41964da034516625ab02a23c93c865db
type commit
tag 0.4.0
tagger Grant Olson &amp;lt;grant@pikimal.com&amp;gt; 1361630125 -0500

0.4.0
gpg: Signature made Sat 23 Feb 2013 09:35:38 AM EST using RSA key ID A18A54D6
gpg: Good signature from &quot;Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;&quot;
gpg:                 aka &quot;Grant T Olson &amp;lt;grant@webkite.com&amp;gt;&quot;
gpg:                 aka &quot;Grant T. Olson (pikimal) &amp;lt;grant@pikimal.com&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Checking out the tag&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~/rubygems-openpgp$ git checkout 0.4.0
Note: checking out '0.4.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at a8f38e7... Tagged CHANGELOG for release
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Go Crazy!&lt;/h2&gt;

&lt;p&gt;Now you can build, branch off of the tag, etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>There's Trust and Then There's Trust and Then There's Trust</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/theres-trust-and-then-theres-trust-and-then-theres-trust.html"/>
   <updated>2013-03-01T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/theres-trust-and-then-theres-trust-and-then-theres-trust</id>
   <content type="html">&lt;h1&gt;There's Trust and Then There's Trust and Then There's Trust&lt;/h1&gt;

&lt;p&gt;Trust is important when it comes to software packages.  Unfortunately
it's also an overloaded word that has multiple meanings.  Lets talk
about three different kinds of trust.&lt;/p&gt;

&lt;h2&gt;Trust (a.k.a. Trustworthiness)&lt;/h2&gt;

&lt;p&gt;This one is the most important.  Unfortunately it's also the hardest
one to verify pragmatically.  How do you know that this gem you
install won't fry your hard drive?  That it won't install a
key-logger?  You don't.  And unfortunately this is very hard to verify
in any Turing complete programming language, especially one with as
dynamic and with as many meta-programming hooks as ruby.&lt;/p&gt;

&lt;p&gt;Still not all hope is lost.  Being able to verify that a package comes
from an author that you consider trustworthy is important.  Most
people would consider an authentic rails gem to be more trustworthy
than a 0.0.1 version gem from a totally unknown person.&lt;/p&gt;

&lt;p&gt;Digital signatures allow you to verify that a software package does
indeed come from a source you consider trustworthy by other means.&lt;/p&gt;

&lt;h2&gt;Trust (a.k.a. Authenticity)&lt;/h2&gt;

&lt;p&gt;This is also important.  You need to be able to trust that a package
is authentic.  This is something that can be solved with technology
and digital signatures.&lt;/p&gt;

&lt;p&gt;If you want any of those pawn shop shows, you've seen someone bring in
some autographed merchandise.  But they don't have any sort of
certificate of authenticity.  And the pawn shop owners need to call in
an expert who can properly verify the signature.&lt;/p&gt;

&lt;p&gt;Just because a digital signature claims a software package has been
signed by Racer X, it doesn't mean it actually was signed by Racer X.
There are multiple OpenPGP keys available for the &lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?search=president%40whitehouse.gov&amp;amp;fingerprint=on&amp;amp;op=index&amp;amp;exact=off&quot;&gt;President of the
United
States&lt;/a&gt;.
We can safely assume most of these are forgeries.  Someone could just
as easily generate a forged key for a known developer or a popular
software package.&lt;/p&gt;

&lt;p&gt;However, if you can verify that the signing key is authentic, you can
ensure that you're at least installing the official version of the
package.  Hopefully from a trusted (a.k.a. trustworthy) source.&lt;/p&gt;

&lt;h2&gt;Trust (a.k.a. the Vouch)&lt;/h2&gt;

&lt;p&gt;This is when you trust a party to vouch for another source.  I may not
be able to trust (a.k.a. Authenticate) Racer X's signing key directly.
But maybe my father did.  I consider him to be generally trustworthy,
I've authenticated his signing key's authenticity, and I trust him to
vouch for the identity of another.  I can now infer that I have the
proper signing key for Racer X.&lt;/p&gt;

&lt;p&gt;This is where either a Certificate Authority or the Web of Trust comes
into play.  You put your faith in other parties that you believe are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Trustworthy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authentic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reliable regarding authentication of others.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This simplifies the process of authenticating entities that you've
never met and never will meet personally.  Of course this still
doesn't do anything to establish Racer X's trustworthiness, but does
establish that Racer X's signing key is authentic.&lt;/p&gt;

&lt;h2&gt;Gnupg Implementation Detail&lt;/h2&gt;

&lt;p&gt;Unfortunately gnupg uses the term &lt;em&gt;trust&lt;/em&gt; in two contexts.  The first is
trust (a.k.a. authenticity).  The trust for a key indicates that you
consider the key to be authentic and belong to the listed owner.  It
also has the concept of &lt;strong&gt;owner trust&lt;/strong&gt; (a.k.a the vouch).  You need
to set the owner trust on a key to help with Web of Trust
calculations.  And of course the third form of trust (a.k.a
trustworthiness) is bypassed altogether.&lt;/p&gt;

&lt;h2&gt;And That's the Three Different Kinds of Trust&lt;/h2&gt;

&lt;p&gt;Next time you hear the term &lt;strong&gt;trust&lt;/strong&gt; in the context of software
authentication ask yourself which kind of trust we're actually talking
about.&lt;/p&gt;

&lt;h2&gt;So&lt;/h2&gt;

&lt;p&gt;Sign your gems.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Verifying Your Initial Install</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-your-initial-install.html"/>
   <updated>2013-02-27T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-your-initial-install</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Verifying Your Initial Install&lt;/h1&gt;

&lt;p&gt;Assuming you have already installed rubygems-openpgp, you can use it
to verify new releases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:~ grant$ gem install rubygems-openpgp --trust
&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email) 
        &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_ULTIMATE
Signature for metadata.gz from user Grant T. Olson (Personal email) 
        &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_ULTIMATE
Owner check indicates kgo@grant-olson.net is owner per rubygems.org...&lt;/span&gt;
Successfully installed rubygems-openpgp-0.6.0
1 gem installed
Installing ri documentation for rubygems-openpgp-0.6.0...
Installing RDoc documentation for rubygems-openpgp-0.6.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But how can you verify your initial install?  If you initially install
a malicious version of rubygems-openpgp, it could do anything.  It
could lie and tell you that the signature was authentic.  Every time a
new version of the software is released, it could secretly download a
new malicious version and once again lie and say the signature was
authentic.&lt;/p&gt;

&lt;p&gt;To protect against this, you can check your initial install with a
detached signature.&lt;/p&gt;

&lt;h2&gt;Obtain and Authenticate My Public Key&lt;/h2&gt;

&lt;p&gt;Fetch the key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-keys 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examine the fingerprint:&lt;/p&gt;

&lt;p&gt;   grant@johnicicleboy:~$ gpg --fingerprint --list-key 0xE3B5806F&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   2048R/E3B5806F 2010-01-11 [expires: 2014-01-03]
      Key fingerprint = A530 C31C D762 0D26 E2BA  C384 B6F6 FFD0 E3B5 806F
uid                  Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;
uid                  Grant T Olson &amp;lt;grant@webkite.com&amp;gt;
uid                  Grant T. Olson (pikimal) &amp;lt;grant@pikimal.com&amp;gt;
sub   2048R/6A8F7CF6 2010-01-11 [expires: 2014-01-03]
sub   2048R/A18A54D6 2010-03-01 [expires: 2014-01-03]
sub   2048R/D53982CE 2010-08-31 [expires: 2014-01-03]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare this to a fingerprint obtained from another source.  Depending
on how &lt;del&gt;paranoid&lt;/del&gt; security conscious you are, you might trust
this website, the &lt;a href=&quot;https://github.com/grant-olson/rubygems-openpgp-ca.org&quot;&gt;github
page&lt;/a&gt;, &lt;a href=&quot;http://www.grant-olson.net/openpgp-key&quot;&gt;my
personal site&lt;/a&gt;, or verify that
you have the same key used to &lt;a href=&quot;http://www.ruby-forum.com/topic/4411248#new&quot;&gt;sign release
notices&lt;/a&gt;, or find a way
to get it from me in person.&lt;/p&gt;

&lt;p&gt;After you've verified the fingerprint to your satisfaction, sign the
key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --lsign 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will require that you have your own gpg key.  If you're
impatient, just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And accept the defaults.&lt;/p&gt;

&lt;h2&gt;Save the Detached Signature&lt;/h2&gt;

&lt;p&gt;Copy the signature and save it into a file &lt;code&gt;saved_sig.asc&lt;/code&gt;.  The
signature for the 0.6.0 release is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.17 (GNU/Linux)

iQEcBAABAgAGBQJRRf0qAAoJEP5F5V2hilTWnhwIAIeCxmyiUT4C7/VPLvpwPypX
IGrhaA3hZZzknAh2MxKx+OPiWDt7ynvSlfdbdYbkSbiKv4ho4husLrhfGV7COKws
HImXCE4SF+Zhb2WifI7haSCRfrZ4M0z/4adalcB4GpkDRmRYuw1RI92PDLOADLSD
u80FPfEF2ekRJqFAUU1Ayzpl8MCfl8e6uzj2CZ8CKtceApb6HZbdWA/jhvuIjXXM
tJDAE22rugFw8ba6e9iinFHYpo9XYMG551YzR70lAqWXtxjgAM3jVDGlAXpkQGxM
9WTas7RRYmLH1h+JvB/DFR61oZaC3gzBP1IS42KOnXywwcq/rK6/CltPf6MZtco=
=aA4r
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Fetch, verify, and install rubygems-openpgp&lt;/h2&gt;

&lt;p&gt;Instead of just installing the gem, fetch it first to get a local
copy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:~ grant$ gem fetch rubygems-openpgp
Fetching: rubygems-openpgp-0.6.0.gem (100%)
Downloaded rubygems-openpgp-0.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the detached signature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:~ grant$ gpg --verify saved_sig.asc rubygems-openpgp-0.6.0.gem 
gpg: Signature made Sat Feb 23 09:36:02 2013 EST using RSA key ID A18A54D6
gpg: Good signature from &quot;Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;&quot;
gpg:                 aka &quot;Grant T. Olson (pikimal) &amp;lt;grant@pikimal.com&amp;gt;&quot;
gpg:                 aka &quot;Grant T Olson &amp;lt;grant@webkite.com&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the verified gem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:~ grant$ gem install rubygems-openpgp-0.6.0.gem 
Successfully installed rubygems-openpgp-0.6.0
1 gem installed
Installing ri documentation for rubygems-openpgp-0.6.0...
Installing RDoc documentation for rubygems-openpgp-0.6.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;That's it!&lt;/h2&gt;

&lt;p&gt;You've installed a manually verified copy of rubygems-openpgp.  Now
that you've done that, you'll be able to update new versions using
rubygems-openpgp itself.&lt;/p&gt;

&lt;h2&gt;Detached Signatures For All Public Releases&lt;/h2&gt;

&lt;h3&gt;0.6.0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.17 (GNU/Linux)

iQEcBAABAgAGBQJRRf0qAAoJEP5F5V2hilTWnhwIAIeCxmyiUT4C7/VPLvpwPypX
IGrhaA3hZZzknAh2MxKx+OPiWDt7ynvSlfdbdYbkSbiKv4ho4husLrhfGV7COKws
HImXCE4SF+Zhb2WifI7haSCRfrZ4M0z/4adalcB4GpkDRmRYuw1RI92PDLOADLSD
u80FPfEF2ekRJqFAUU1Ayzpl8MCfl8e6uzj2CZ8CKtceApb6HZbdWA/jhvuIjXXM
tJDAE22rugFw8ba6e9iinFHYpo9XYMG551YzR70lAqWXtxjgAM3jVDGlAXpkQGxM
9WTas7RRYmLH1h+JvB/DFR61oZaC3gzBP1IS42KOnXywwcq/rK6/CltPf6MZtco=
=aA4r
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;0.5.1&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAABAgAGBQJRPMTkAAoJEP5F5V2hilTWuBMH/30hvYMpCP6dawq6LwufKTgB
w+hsiII3nRshCo6yicYs8kBsT/7oSc7XZg1q3oHXQgJdal/eLBdVEOXdZ8a7zKPh
SjvuHRSBpei3wA1DjPAvJxqjdGOX883rzDLRtP+pvyzazeO6Fj/8d/c8Y6YArEf5
gwWdaA2s0XXdecH21yWMZPKD3x2YQEARCJJWhyngt+FW5ZHlaAwXPkhpAptzchEe
MC8ThY4WZIPRc3+O9II93wGcNJu3T0sOg5NUzgT6vNLzCOtNLNe/hpD/QWUt/5za
RbwqxGcP0QyNDEZQTVpLTBiiq++qyGRUb7cySTDVBqgwasal19VmVsflhTCbBt0=
=mU3L
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;0.5.0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAABAgAGBQJRPJY3AAoJEP5F5V2hilTWVj8H/2R3Ue+4lJxbpZwu/cOodlWb
ApflZwrhOnGHjxswL7cV7Rf15sPP9WHUvNf/n8Cuc4hHKArW7/wwdw1LP4wmrRz4
8RxKx8kR7An9JFvs9HhrDt1BvS/j9moaKn//lZfZV7LPIEEuHEUTCNCtHkuV/oBG
LH9tNSMs1CO1D1kkPyxc2aXZm0mRpygWrS1YskJPy7xdR2aNQk4LHJNF168m+XJH
2l8U29QgoCpD0W4iL+6ooyY2lyVFWYhQbBd7ojVRG16Q8CxUf4+ZNey+3tgchVEP
qBFa4M/+m2LoVdCGPOL8meFMytDR75J4VGWtGmRxjfhBeOeNVhneIQT5C6fHCfw=
=Qxhv
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;0.4.0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.17 (Darwin)

iQEcBAABCgAGBQJRKNPSAAoJEP5F5V2hilTWMS4IAIfrL21CuSrZCof8UcrFPZds
LvCEhBKbfE4aB4Jgf8QBc6PXrm916TU8+IcfhWVzHc98ENRui+xUVtJ1LOF7tx31
eUcck9VqGZQ7RkI9GpX5Dcbj+0SzL3ghVgVv+UMttwwAahqT8VXvPlS6ttHjroqD
87flVoUED/MNFeT8AfGvDp4IOJ+lQl8Y7x6JUJJv+OCOSnG6e/xtQZcMaTf9LKWW
z6FO9iplsjbLdwCndKjbPT6bygYRmw8/mF/t3DSJb7wf4HbFjLri24TkwNVZ5o9T
hiUjubQJuZrjVTqpaPW7ZF0iL/0xgERCz7gN6SsvIM5MIm3Hok1oZ2oVMS8fzZQ=
=RUfl
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;0.3.0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.17 (Darwin)

iQEcBAABCgAGBQJRF6YqAAoJEP5F5V2hilTWDYQH/jEDDhI6MrgMtJrjtUY7RDdN
+MTwkTutOIZ8P35KnKen1gOrNKzrS+Pl5p7m2fa09VBv1e1v7XNsV4Rweh4jQcuP
YDR9h0Cn4rexWj9ABC0rGVpvQrTDEJK1acTbBXI0PFs4w0m9DOT/0U5l147W+mii
Sg7nUM3Tgvxk38d4djS3ifD+Aq6+Nm3F2hRhamTVfdaerjWJSy4Bg7HW+FaXTqyE
dFob+Mv1PZG+VPG78zszq+4WMbhvNAUtegmsXvfl8+j9S142emw2HU2Mcs71QBo4
/Tb6iPyaQsXAtR15Z9vO3W/bMTCyZsTq5Hwwgp01MIr+Ek+TjM6DK8wfT65sab8=
=N+W6
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;0.2.1&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAABAwAGBQJN5DZLAAoJEP5F5V2hilTWRT0H/0pOYJrQXeIWZHd1O/zu8Fk4
dYlHy4Dpm3BrskJaq0EQm81BLVeHGawTPYIUr/tI3Wnmfy+pSBxpAgA7OZMkHnu2
sHzLqU/FixMmYPMBkfZ0bDDsSgr1fAOINRCy6wlpQvlpnuMiybB7+UDboQEfaLLa
c8kvCenhEWiI6MO3lyye7PKfgNXNbML5vGJ/WcI3HIQpAgJ8+ItB16tLnw22JlPe
qv+IS9SlHE/0vY6HdAB3wnfuQpLXM5JZlpcErFR37dCGrvlcgetjWN84pEtm6jIO
Jsk6YyxWu5uxE84UEc8HWzbFrb5sVstYLKW+vwqIVV76spK5EvAaKCOrMnzP/Qg=
=Lltd
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Gem Signing - X.509 vs OpenPGP</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/gem-signing-x509-and-openpgp.html"/>
   <updated>2013-02-26T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/gem-signing-x509-and-openpgp</id>
   <content type="html">&lt;h1&gt;Gem Signing - X.509 vs OpenPGP&lt;/h1&gt;

&lt;p&gt;This is a contentious topic.  It's right up there with Emacs vs Vim.
Kirk vs Picard.  Jesus vs Santa.  Etc.&lt;/p&gt;

&lt;p&gt;Some people have been dismissive of rubygems-openpgp.  &quot;Why not use
X.509?  That has native ruby libraries!  You don't need to rely on
gpg!&quot;  And I'm ashamed to say I've been equally dismissive.  &quot;Because
X.509 sucks!  It's broken!  Totally wrong for open source!&quot;  And then a
third party will chime in, &quot;Why are you arguing about technical
details?  It's all just RSA signatures in the end!&quot;&lt;/p&gt;

&lt;p&gt;I'm going to try to take a step back and articulate in concrete terms
why I don't think there will ever be a decent X.509 signing solution
for gems.  And why I think we should use OpenPGP even if it can't
immediately be used by all users.&lt;/p&gt;

&lt;p&gt;I'll avoid the more arcane technical details of each standard, and I
hope not to flame too much.&lt;/p&gt;

&lt;h2&gt;State of the Union&lt;/h2&gt;

&lt;p&gt;Basic functionality do sign gems with X.509 was introduced in release
0.8.11 of rubygems, in July of 2005.  And 7-1/2 years later we
have... basic functionality to sign gems with X.509.  In theory this
can be used by anyone using rubygems.  In practice it's used by no one.&lt;/p&gt;

&lt;h2&gt;Central Thesis, in Terms Anyone Can Understand&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An X.509 based system requires a complete &lt;strong&gt;centralized&lt;/strong&gt; end-to-end
authentication system to be in designed and implemented &lt;strong&gt;before&lt;/strong&gt; it
is useful to gem developers and users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An OpenPGP system allows gem developers and users to sign and verify
in a useful way &lt;em&gt;immediately&lt;/em&gt;.  Authentication systems can be added
&lt;strong&gt;after&lt;/strong&gt; the fact in a &lt;strong&gt;decentralized&lt;/strong&gt; fashion.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;X.509 is the cathedral, OpenPGP is the bazaar.&lt;/p&gt;

&lt;h2&gt;Why does X.509 Need the Authentication System First?&lt;/h2&gt;

&lt;p&gt;X.509 certificate chains start with a root Certificate Authority, may
have intermediate Certificate Authorities, that ultimately sign off on
developer's certificates.  They are strict tree structures.  Because
they are trees, each certificate can only have a single parent.&lt;/p&gt;

&lt;p&gt;As in biology, the parent must exist before the child.  Without a
Certificate Authority system in place before hand, a developer is left
with no choice but to issue a self-signed certificate.  This
conveniently sidesteps the ability to reliably authenticate the
signature.  Hence those nasty browser notices when you go to a
&lt;a href=&quot;https://web.monkeysphere.info/&quot;&gt;self-signed web page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Why doesn't OpenPGP?&lt;/h2&gt;

&lt;p&gt;OpenPGP's trust model is the Web of Trust.  A developer creates a
signing key.  After that, other key issuers can create signatures that
point to the keys they think are authentic.  Multiple issuers can say
they trust the same key.  The trust model is a directed graph.&lt;/p&gt;

&lt;p&gt;These signatures are issued &lt;em&gt;after&lt;/em&gt; key creation at any time by anyone
with or without involvement of the original developer.&lt;/p&gt;

&lt;h2&gt;Practical Implications&lt;/h2&gt;

&lt;h3&gt;X.509&lt;/h3&gt;

&lt;h4&gt;The Certificate Authority structure must be in place &lt;em&gt;before&lt;/em&gt; developers can create their own certificates&lt;/h4&gt;

&lt;p&gt;A developer can't create their own certificate until the CA structure
is designed and implemented.  They need to wait for the system to be
in place first.  If there is no CA structure in place, the only
alternative they have is to issue a self-signed certificate,
essentially declaring themselves a mini-CA.  In addition to mostly
side-stepping the authentication issue, thousands of self-signed
certificates don't scale if a user actually tries to authenticate
these self-signed keys.&lt;/p&gt;

&lt;h4&gt;A Certificate Authority can't approve old packages&lt;/h4&gt;

&lt;p&gt;If a developer later wants to switch over to a newly formed CA, they
must generate new certificates signed by the CA and republish their
software.  At the same time, if a Certificate Authority wants to
authenticate an existing package, they need to convince the developer
to do all of the above.  There are currently 50,000+ gems on
rubygems.org that would need to retroactively be re-signed and
republished if a new CA was introduced.&lt;/p&gt;

&lt;h4&gt;Single point of failure&lt;/h4&gt;

&lt;p&gt;Since each certificate can only have a single parent, if any parent or
grandparent becomes invalid and revoked, the developer's certificate
immediately becomes invalid as well.  The certificate chain cannot be
followed.  In this event a developer needs to issue a new certificate
signed by a new CA and republish their software.  An existing package
can't be re-certified.&lt;/p&gt;

&lt;h3&gt;OpenPGP&lt;/h3&gt;

&lt;h4&gt;You can generate a usable key anytime you want&lt;/h4&gt;

&lt;p&gt;There is no need to wait for &lt;strong&gt;the man&lt;/strong&gt; to build a CA framework and
setup signing keys.  Developers can make their keys and start using
them.  There is no penalty imposed by doing this.  A third party (or
multiple parties) can declare the key authentic after the fact.  This
can be done without having to republish the software and with or
without the cooperation of the developer.&lt;/p&gt;

&lt;h4&gt;Multiple trust paths can be established&lt;/h4&gt;

&lt;p&gt;Multiple trust paths can be established to a developer's key.  If one
trust path becomes compromised there may be alternate trust paths that
can be used.  If an end user doesn't like a particular trust path,
they can choose to ignore that and go with another.&lt;/p&gt;

&lt;h4&gt;Trees are subsets of directed graphs&lt;/h4&gt;

&lt;p&gt;You can implement a tree structure in a directed graph but not vice
versa.  And that's exactly what our Certificate Authority does.  It
models a CA-style tree on top the Web of Trust.&lt;/p&gt;

&lt;h2&gt;The problem with a volunteer X.509 solution&lt;/h2&gt;

&lt;p&gt;X.509 has a chicken-and-egg problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The system isn't usable until the Certificate Authority is designed
and implemented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The design and implementation of said Certificate Authority takes
serious time and effort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This system needs a general consensus between the CA, gem
developers, and gem users to be useful.  It is difficult to achieve
when you have thousands of people with different goals and needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's no guarantee that the system will be adopted, making the
time and effort to develop such a system high-risk.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And that's why I think we still don't have a usable signing mechanism
7-1/2 years after it was ostensibly possible for developers to sign
gems.  No one wants to spend a significant amount of time and energy
developing a solution in isolation that has no guarantee of being
used by or useful to the community.&lt;/p&gt;

&lt;h2&gt;OpenPGP-based systems don't have that problem&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A developer can start signing packages in a useful fashion with a
five minute time investment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various authentication systems can be implemented &lt;em&gt;after&lt;/em&gt; there are
a significant number of signed gems in circulation and it's easier to
demonstrate their usefulness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These systems can be as experimental as you want.  They don't
require anything near universal adoption.  They can be used in
parallel.  Niche systems can be useful to some users but not the
community at large.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;People can implement systems incrementally, and get the out there
where they can be seen by the community.  They can iteratively work on
a system and interact with other interested people from the beginning.&lt;/p&gt;

&lt;h2&gt;So what's better for a loosely based confederation of thousands of open source developers?&lt;/h2&gt;

&lt;h3&gt;A system that:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is centralized?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requires up front design and implementation before it can be used
by &lt;em&gt;anyone&lt;/em&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is strictly hierarchical with a single point of failure?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requires republishing to establish a certificate chains on
existing signed software?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Or an system that:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is decentralized?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is immediately usable by developers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is fault tolerant with multiple potential trust paths?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows end users to pick-and choose their authentication systems?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows various experimental authentication systems to fight-it-out
in a Darwinian fashion?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows certification to be performed after the fact without
republishing software packages?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Answer: OpenPGP&lt;/h2&gt;

&lt;p&gt;So Start signing your gems.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Signing Your Gems</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-your-gems.html"/>
   <updated>2013-02-25T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-your-gems</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Signing Your Gems&lt;/h1&gt;

&lt;p&gt;By signing your gems you allow other users to verify the gem was
actually written and build by you.&lt;/p&gt;

&lt;h2&gt;OpenPGP Key Setup&lt;/h2&gt;

&lt;p&gt;You'll need to generate a signing key and publish it to the keyservers
so that users can retrieve the key.&lt;/p&gt;

&lt;h3&gt;Install gpg if not installed.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gpg4win.org&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gpgtools.org/&quot;&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux - installed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure if you need to? Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Generating the key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the defaults are fine.  You will want to use a real email address
so users can tie the key to your account.&lt;/p&gt;

&lt;h3&gt;Publishing the key&lt;/h3&gt;

&lt;p&gt;This allows users worldwide to retrieve your public key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --send-key 0xDEADBEEF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Backups&lt;/h3&gt;

&lt;p&gt;Since you have actually published your key, it is highly advisable
that you back it up onto some safe offline media.  There is no way to
re-generate the key if you lose the copy on your machine.&lt;/p&gt;

&lt;p&gt;In addition, you'll want to generate a revocation certificate.  This
allows you to send a revocation to the keyserver network in the event
your key is compromised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /media/usb_stick
gpg --export-secret-key 0xDEADBEEF &amp;gt; key_backup.gpg
gpg --gen-revoke 0xDEADBEEF &amp;gt; key_revoke.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that the revocation certificate is unencrypted, and anyone
who can gain access to it can revoke your key worldwide.&lt;/p&gt;

&lt;h3&gt;The More You Know...&lt;/h3&gt;

&lt;p&gt;Since you will be using your key publicly, it is highly advisable that
you read up more on gnupg and OpenPGP.  But that's out of scope for
this article.&lt;/p&gt;

&lt;h2&gt;Signing Your Gem&lt;/h2&gt;

&lt;p&gt;Install rubygems-openpgp if you haven't yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign your gem before publishing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem build foo.gemspec --sign
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the signature.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem verify foo-0.0.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publish the gem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem push foo-0.0.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;At this point anyone can download your gem, retrieve your public key,
and verify the contents.  However, they don't have an easy way to
authenticate your key.  You may want to register it with this site.&lt;/p&gt;

&lt;h2&gt;Registering Your Public Key with rubygems-openpgp-ca.org&lt;/h2&gt;

&lt;p&gt;Fill out &lt;a href=&quot;/users/sign_up&quot;&gt;the application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will receive an email with some encrypted text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.11 (GNU/Linux)

hQEMAxRYvMtqj3z2AQf+I1+9b6RAysFonkr+A0ETE6paWAw6enZw8Z0uj24DBIjr
iRQf3s/HFKntOPs5ziLHWZS+5B7KuxvIiJQzvLDroLteBKYo0XwZTe3DTYAQz54b
aqe8Yk58dPvmAGJSqFhICXV2kv3QJftLTzXka5OxjhA93EJtK8Z+Orl1ZHgml/70
QAVqBEt83jLQhTfFJOYASoctAIJmTZzfUexGLReghOMBEF/hU85/9mMuMwHMrHou
ctpQ6IfxTEtVy+rUnOiJ6rK4Ky5th2NA7KoLnlDtB15xkkr7vWwTD2NuMX3KQZ87
GbvhqE272xCdJTGUAH9O1QcCMta6RSCKur19DkpBptI/AVKGxBdghd76yS8ImC7J
E5kQJdGMXbV1NWTE8azfKnvf1/0PbW9VjjB0CIc62hyYEwkh/WLp2LPnQPjQ1FiY
=qAbC
-----END PGP MESSAGE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're not using an &lt;a href=&quot;http://enigmail.net/home/index.php&quot;&gt;encryption enabled email
client&lt;/a&gt; you'll need to copy the
encrypted text into a file and decrypt manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg saved_text.asc
cat saved_text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the unencrypted link to complete the process.&lt;/p&gt;

&lt;p&gt;We'll review the application, hopefully sign off on your key, and
notify you one way or the other.&lt;/p&gt;

&lt;h2&gt;Retrieving Our Signature&lt;/h2&gt;

&lt;p&gt;After we've sent our signature to the keyservers you'll want to
retreive a copy by refreshing your keyring:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --refresh-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will look for new signatures on all keys on your keyring.  You
want to do this periodically to retrieve any new signatures,
revocations, and expirations that have been published after you
originally retrieved any given key.&lt;/p&gt;

&lt;p&gt;You can now confirm that your key has been signed.  Just use the
command &lt;code&gt;gpg --list-sigs 0xDEADBEEF&lt;/code&gt;.  You'll see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;johnmudhead:pikimal grant$ gpg --list-sigs 0xE3B5806F
pub   2048R/E3B5806F 2010-01-11 [expires: 2014-01-03]
uid                  Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;
sig 3        E3B5806F 2013-01-03  Grant T. Olson (Personal email) &amp;lt;kgo@grant-olson.net&amp;gt;
sig 3        6094090A 2013-02-18  rubygems-openpgp Certificate Authority
                                  Signing Key (http://rubygems-openpgp-ca.org)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now that you've done all that, please be sure to...&lt;/p&gt;

&lt;h2&gt;Backup your public key&lt;/h2&gt;

&lt;p&gt;And after that...&lt;/p&gt;

&lt;h2&gt;Backup your public key&lt;/h2&gt;

&lt;p&gt;You did create a backup, right?&lt;/p&gt;

&lt;h2&gt;And you're done&lt;/h2&gt;

&lt;p&gt;That wasn't too bad, was it?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Signing the Certificate Authority Keys</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-the-certificate-authority-keys.html"/>
   <updated>2013-02-24T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-signing-the-certificate-authority-keys</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Signing the Certificate Authority Keys&lt;/h1&gt;

&lt;p&gt;In a perfect world you would meet the developer of every gem you use
in person, verify their OpenPGP key, and sign off on it.  But this
approach doesn't scale very well.  Even if you skip the in person part
of the verification and trust each developer's github page, you can
still end up with hundreds of keys that need to be verified.&lt;/p&gt;

&lt;p&gt;A Certificate Authority can help with that.  The basic idea is that
the Certificate Authority does its own verification on keys and
publishes that information.  Then you simply trust (or not) the single
Certificate Authority.  Now you only have one verification to perform.&lt;/p&gt;

&lt;h2&gt;Our Signing Key Configuration&lt;/h2&gt;

&lt;p&gt;All OpenPGP 'settings' are stored as digital signatures issued by
signing keys.  If you trust a key is authentic, you sign a little
document saying so.  If you want to expire an old key, you sign a
little document saying so.  If settings were just stored in a file,
then someone who has compromised your computer could just change the
&lt;code&gt;trusted_keys.txt&lt;/code&gt; file.  A signature requires control of the private
key which is usually encrypted.&lt;/p&gt;

&lt;p&gt;We have two different types of keys.  The &lt;strong&gt;master key&lt;/strong&gt; and the &lt;strong&gt;signing
key(s)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The master key is secured on a computer in an undisclosed location
that has never been on the Internet.  It is only fired up when we need
to issue a certification for a new signing key, which may happen once
or twice a year.  This certification is then transported via USB key
to another computer and distributed to the keyserver network.  This
makes it very difficult to compromise the master key.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;signing keys&lt;/strong&gt; are used to perform the day-to-day signing of
developer's keys.  They are contained on OpenPGP smartcards which
provide a few layers of security.  A PIN code must be entered every
time a signature is issued.  The card will only allow three pin
attempts before locking.  An attacker would need to physically possess
the card and know the PIN to issue a forged signature.&lt;/p&gt;

&lt;p&gt;As you can see, the signing keys are still very secure.  But in the
event one is compromised the &lt;strong&gt;master key&lt;/strong&gt; can revoke its
certification and issue a new certification on a new signing key.  It
just adds another layer of security to the process.&lt;/p&gt;

&lt;h2&gt;Telling gnupg That You Trust Our Keys&lt;/h2&gt;

&lt;p&gt;You'll want to issue a trust signature on the master key.  This says
that you trust signatures issued by any key that has been signed by
the master key itself.  In short, this means that you will ultimately
trust the &lt;strong&gt;signing keys&lt;/strong&gt; and everything will work the way you want
it to.&lt;/p&gt;

&lt;p&gt;But before you do that, you'll need to generate a gpg key if you
haven't already.&lt;/p&gt;

&lt;h3&gt;Generating your signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part you can follow the defaults.  I'll write in more
detail about generating keys in another post, but for now lets just
keep moving and generate a key quickly using the defaults.&lt;/p&gt;

&lt;h3&gt;Retrieving the Master Key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-keys 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying the fingerprint&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --fingerprint --list-key 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will show you the fingerprint of the key installed locally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   4096R/FDBA50FB 2013-02-16 [expires: 2014-02-16]
      Key fingerprint = BEED FE71 7668 50BF A6DE  5A19 25A6 5396 FDBA 50FB
uid                  rubygems-openpgp Certificate Authority MASTER KEY
                                  (http://rubygems-openpgp-ca.org)
sub   4096R/9A39A769 2013-02-16 [expires: 2014-02-16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll want to compare this with a copy of the fingerprint retrieved
from a trusted source.  In an ideal world, you would do this in
person.  But this can be impractical.&lt;/p&gt;

&lt;p&gt;For now, lets assume that the &lt;a href=&quot;https://github.com/grant-olson/rubygems-openpgp-ca.org&quot;&gt;copy listed at
github&lt;/a&gt; is
safe.  Now a malicious user would have to compromise both this site
and a github account to replace both key ids and fingerprints.&lt;/p&gt;

&lt;p&gt;Another option would be to verify that the key you have is signed by
the same key I use for &lt;a href=&quot;http://www.ruby-forum.com/topic/4411248#new&quot;&gt;release announcements on
ruby-talk&lt;/a&gt;.  That adds
another layer that a malicious user would need to compromise.  They'd
need to hack my email, and my personal OpenPGP key.&lt;/p&gt;

&lt;p&gt;At some point you'll have decided that that key is authentic based on
your own personal standards.&lt;/p&gt;

&lt;h3&gt;Issuing the trust signature&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --edit-key 0xFDBA50FB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fire up an interactive session.  The settings can get a
little confusing so lets walk through them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grant@johnicicleboy:~$ gpg --edit-key 0xFDBA50FB
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  4096R/FDBA50FB  created: 2013-02-16  expires: 2014-02-16  usage: SC  
                     trust: unknown       validity: unknown
sub  4096R/9A39A769  created: 2013-02-16  expires: 2014-02-16  usage: E   
[ unknown] (1). rubygems-openpgp Certificate Authority MASTER KEY
                                 (http://rubygems-openpgp-ca.org)

gpg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First you'll want to tell gpg that you're issuing a local trust
signature.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;local&lt;/strong&gt; part means that this signature will only
work on your local machine.  You will not advertise to the world that
you signed this key.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;trust&lt;/strong&gt; part means that you're issuing a trust signature as
discussed above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; tlsign

pub  4096R/FDBA50FB  created: 2013-02-16  expires: 2014-02-16  usage: SC  
                     trust: unknown       validity: unknown
 Primary key fingerprint: BEED FE71 7668 50BF A6DE  5A19 25A6 5396 FDBA 50FB

     rubygems-openpgp Certificate Authority MASTER KEY
                  (http://rubygems-openpgp-ca.org)

This key is due to expire on 2014-02-16.
Please decide how far you trust this user to correctly verify other users' keys
(by looking at passports, checking fingerprints from different sources, etc.)

  1 = I trust marginally
  2 = I trust fully

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next it will ask how much you trust the key.  This has to do with the
way the OpenPGP Web-of-Trust works, which I'll hopefully discuss in a
later post.  For now, say you trust it fully:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your selection? 2

Please enter the depth of this trust signature.
A depth greater than 1 allows the key you are signing to make
trust signatures on your behalf.

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting a depth of 2, the signing keys' signatures are trusted, but
developer keys are not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your selection? 2

Please enter a domain to restrict this signature, or enter for none.

Your selection? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just hit enter here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Are you sure that you want to sign this key with your
key &quot;Test User &amp;lt;test@example.org&amp;gt;&quot; (25D38721)

The signature will be marked as non-exportable.

Really sign? (y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select yes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Really sign? (y/N) y

You need a passphrase to unlock the secret key for
user: &quot;Test User &amp;lt;test@example.org&amp;gt;&quot;
2048-bit RSA key, ID 25D38721, created 2013-02-09
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll be prompted for a password.  Enter it.  At this point gnupg
still won't save the signature until you quit and save.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; quit
Save changes? (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Download the current signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --keyserver pool.sks-keyservers.net --recv-keys 0x6094090A
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Test with the test gem&lt;/h3&gt;

&lt;p&gt;If you've already installed the test gem and certified the signing
key, delete the key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --delete-key 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the install with &lt;code&gt;--trust&lt;/code&gt; and &lt;code&gt;--get-key&lt;/code&gt; args.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --trust --get-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is setup correctly, you should trust the package based
on the Certificate Authority signature on the key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &lt;kgo@grant-olson.net&gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &lt;kgo@grant-olson.net&gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Owner check indicates kgo@grant-olson.net is owner per rubygems.org...&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Now you're set!&lt;/h2&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Complete Guide to Verifying Gems with rubygems-openpgp</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/the-complete-guide-to-verifying-gems-with-rubygems-openpgp</id>
   <content type="html">&lt;h1&gt;The Complete Guide to Verifying Gems with rubygems-openpgp&lt;/h1&gt;

&lt;p&gt;rubygems-openpgp allows you to verify a gem by checking the digital
signature.  This helps to ensure that the gem you are using is
actually the gem published by the author and that it hasn't been
replaced with malicious code.&lt;/p&gt;

&lt;p&gt;Gem users can verify their gems with a few simple steps.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;h3&gt;Install the rubygems plugin&lt;/h3&gt;

&lt;p&gt;Ideally you want to &lt;a href=&quot;./the-complete-guide-to-verifying-your-initial-install.html&quot;&gt;verify the initial install with a detached
signature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But if you're just trying to demo the software, you can just install
the gem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rubygems-openpgp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Install gpg if not installed.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gpg4win.org&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gpgtools.org/&quot;&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux - installed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure if you need to? Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Install and verify the test gem&lt;/h2&gt;

&lt;p&gt;There is a signed version of the hola gem on rubygems.org.  Try to
install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will probably fail with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:red;'&gt;You don't have the public key.  Use --get-key to automagically retrieve from keyservers
Fail!&lt;/span&gt;
ERROR:  Fail!
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is because you don't have the user's public signing key yet. This
is required to verify the signature. Try again with an extra option to
retrieve the public key automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --get-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will retrieve the key and the signature can be verified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED
Owner check indicates kgo@grant-olson.net is owner per rubygems.org...&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Note that we were able to verify the signature, but it's listed as
&lt;strong&gt;TRUST_UNDEFINED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is because even though you've downloaded the key, you have no
idea if it is authentic. Anyone can make a key with any email and
upload it. (In fact there are several forged keys out there now that
are
&lt;a href=&quot;http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&amp;amp;search=president%40whitehouse.gov&amp;amp;fingerprint=on&quot;&gt;attributed to president@whitehouse.gov&lt;/a&gt;
.)  Hence the lack of trust.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp has a &lt;code&gt;--trust&lt;/code&gt; flag that will make sure you only
install trusted gems.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will fail because the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Authenticating the key&lt;/h2&gt;

&lt;p&gt;Because someone can easily create a forged key, you need to
authenticate the key. We'll cover authentication in another post in
the future. For the purposes of this discussion, lets be hand-wavy
about that and assume that you've somehow authenticated the key.&lt;/p&gt;

&lt;h2&gt;Signing the key&lt;/h2&gt;

&lt;p&gt;All OpenPGP 'settings' are stored as digital signatures.  If you trust
a key is authentic, you sign a little document saying so.  If you want
to expire an old key, you sign a little document saying so.  If
settings were just stored in a file, then someone who has compromised
your computer could just change the &lt;code&gt;trusted_keys.txt&lt;/code&gt; file.  A
signature requires control of the private key which is usually
encrypted.&lt;/p&gt;

&lt;p&gt;Now that you've authenticated the key you want to sign the key. This
issues a little signed document saying you believe this is indeed the
correct key for the given user.&lt;/p&gt;

&lt;p&gt;But before you do that, you'll need to generate a gpg key if you
haven't already.&lt;/p&gt;

&lt;h3&gt;Generating your signing key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part you can follow the defaults.  I'll write in more
detail about generating keys in another post, but for now lets just
keep moving and generate a key quickly using the defaults.&lt;/p&gt;

&lt;h3&gt;Signing the test package author's key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --lsign 0xE3B5806F
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Verifying against the authenticated key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you'll see that the signature is verified &lt;strong&gt;and&lt;/strong&gt; trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:green;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Signature for metadata.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_FULLY
Owner check indicates kgo@grant-olson.net is owner per rubygems.org...&lt;/span&gt;
Successfully installed openpgp_signed_hola-0.0.0
1 gem installed
Installing ri documentation for openpgp_signed_hola-0.0.0...
Installing RDoc documentation for openpgp_signed_hola-0.0.0...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The warning is gone and the gem installs.&lt;/p&gt;

&lt;h2&gt;Congratulations, you've just authenticated your first gem!&lt;/h2&gt;

&lt;p&gt;That's all there is to it.  And it's all well and good for a single
gem.  But the process doesn't scale very well.  You need to verify the
key for the developers of every gem you need to use.  In a complex
project that can number in the hundreds.&lt;/p&gt;

&lt;p&gt;A certificate authority steps in as a trusted third-party, issuing
its own signatures against developer keys that it trusts.  Now you, as
the user, only need to decide to authenticate and trust the
certificate authority instead of 100's of individual developers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;./the-complete-guide-to-signing-the-certificate-authority-keys.html&quot;&gt;The Complete Guide to Signing the Certificate Authority Keys&lt;/a&gt;,
we describe how to configure your system to trust the
rubygems-openpgp-ca keys, hopefully making the authentication process
easier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>rubygems-openpgp 0.4 Released</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released.html"/>
   <updated>2013-02-23T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/rubygems-openpgp-0.4-released</id>
   <content type="html">&lt;h1&gt;rubygems-openpgp 0.4 Released&lt;/h1&gt;

&lt;h2&gt;Now with Trust!&lt;/h2&gt;

&lt;p&gt;Previous versions could only verify signatures.  They didn't take your
gnupg trust settings into account.  You can now provide the &lt;code&gt;--trust&lt;/code&gt;
flag and gems will only be installed if you trust the signing key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install openpgp_signed_hola --verify --trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the install fail if the key isn't trusted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span style='color:GoldenRod;'&gt;Signature for data.tar.gz from user Grant T. Olson (Personal email)
    &amp;lt;kgo@grant-olson.net&amp;gt; key 0x0E3B5806F is GOODSIG, VALIDSIG and TRUST_UNDEFINED&lt;/span&gt;
&lt;span style='color:red'&gt;Trust Undefined and you've specified --trust.  Won't install.&lt;/span&gt;
ERROR:  Trust Undefined and you've specified --trust.  Won't install.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Learn more at &lt;a href=&quot;./the-complete-guide-to-verifying-gems-with-rubygems-openpgp.html&quot;&gt;The Complete Guide to Verifying Gems with
rubygems-openpgp&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Release Signature&lt;/h2&gt;

&lt;p&gt;Previous users of rubygems-openpgp should be able to verify this
release with rubygems-openpgp.  New users may want to manually check
the initial install.&lt;/p&gt;

&lt;p&gt;Save the release signature locally and then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem fetch rubygems-openpgp
gpg --verify saved_sig.asc rubygems-openpgp-0.4.0.gem
gem install rubygems-openpgp-0.4.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The release signature for 0.4.0 is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.17 (Darwin)

iQEcBAABCgAGBQJRKNPSAAoJEP5F5V2hilTWMS4IAIfrL21CuSrZCof8UcrFPZds
LvCEhBKbfE4aB4Jgf8QBc6PXrm916TU8+IcfhWVzHc98ENRui+xUVtJ1LOF7tx31
eUcck9VqGZQ7RkI9GpX5Dcbj+0SzL3ghVgVv+UMttwwAahqT8VXvPlS6ttHjroqD
87flVoUED/MNFeT8AfGvDp4IOJ+lQl8Y7x6JUJJv+OCOSnG6e/xtQZcMaTf9LKWW
z6FO9iplsjbLdwCndKjbPT6bygYRmw8/mF/t3DSJb7wf4HbFjLri24TkwNVZ5o9T
hiUjubQJuZrjVTqpaPW7ZF0iL/0xgERCz7gN6SsvIM5MIm3Hok1oZ2oVMS8fzZQ=
=RUfl
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>How Many People Need to Verify Software to Make Signing Useful?</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful.html"/>
   <updated>2013-02-22T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/how-many-people-need-to-verify-software-to-make-signing-useful</id>
   <content type="html">&lt;h1&gt;How Many People Need to Verify Software to Make Signing Useful?&lt;/h1&gt;

&lt;h2&gt;Lets do a quick straw poll.&lt;/h2&gt;

&lt;p&gt;Raise your hand if you're concerned with being able to verify
software.  I imagine everyone has their hands up now.  After all,
this site is dedicated to software verification.&lt;/p&gt;

&lt;p&gt;Keep your hand up if you've ever downloaded a linux distribution from
the web.  I imagine a few hands dropped, but we're all software
developers here, and most of us have probably played with linux.&lt;/p&gt;

&lt;p&gt;Now keep your hand up if you actually checked the checksums on the ISO
image you downloaded to verify the image.  What? Did a few hands just
drop there?&lt;/p&gt;

&lt;p&gt;For those of you with your hands still up, did you actually check the
OpenPGP signature of the checksum file you downloaded?  Nope?  Drop
your hands.  I imagine we just about lost everyone there.&lt;/p&gt;

&lt;p&gt;And now we're left with the few and the proud.  The ones that followed
the full process.  And I've got one question for you heroes among men.
How many of you performed any meaningful authentication on the signing
keys?  If you just grabbed the key from the keyservers without any
thought put your hand down.&lt;/p&gt;

&lt;p&gt;Does anyone still have their hand up?  Maybe one or two people if
we're lucky.&lt;/p&gt;

&lt;h2&gt;Those checksums and signatures must be useless...&lt;/h2&gt;

&lt;p&gt;I don't believe so.&lt;/p&gt;

&lt;p&gt;Less and less people followed along at each step in the above
verification process.  I imagine if we were able to get real numbers
and draw a chart, we'd basically see exponential decay.  Most people
won't perform any verification.  Some people will perform some
verification.  And a small few will go through a full verification of
the software.&lt;/p&gt;

&lt;p&gt;For a distribution as popular as Ubuntu, that is probably enough.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Linus%27s_Law&quot;&gt;Linus' Law&lt;/a&gt; states that
&quot;given enough eyeballs, all bugs are shallow.&quot;  The same holds true
for a software compromise, assuming that proper validation tools are
in place.  Most people just don't care at all.  Some are moderately
security conscious.  A few are highly conscious.&lt;/p&gt;

&lt;h2&gt;But the proud brave few can't verify at all without tools&lt;/h2&gt;

&lt;p&gt;Even if you, as a security conscious user, wants to verify your
software packages, it's up to the developer and/or distributor to
provide the tools for you to do so.  That user needs a signature and a
way to verify the signing key.&lt;/p&gt;

&lt;p&gt;rubygems-openpgp aims to provide new tools that the users who choose to
can use now.  The existing solution has been around since July 2005
and has seen basically no adoption for a variety of reasons that I
won't get into here.  (And in fairness, I suggest you try signing and
verifying a gem both with the existing tools and rubygems-openpgp and
decide for yourself what is better.)&lt;/p&gt;

&lt;h2&gt;But not everyone everywhere can use rubygems-openpgp today&lt;/h2&gt;

&lt;p&gt;By far the biggest complaint about rubygems-openpgp is that it
currently uses gpg as the back end.  This is additional software that
(for example) a Windows user would need to install to take advantage
of software verification.&lt;/p&gt;

&lt;p&gt;Keep in mind that a user in this context is a software developer, it's
not the stereotypical grandma who can't even use a smart phone.  And
that signing and verifying is completely optional.  Nothing breaks if
you choose not to use it.&lt;/p&gt;

&lt;p&gt;But I'll save that argument for another time.&lt;/p&gt;

&lt;h2&gt;Back to the original question&lt;/h2&gt;

&lt;p&gt;How many people need to verify software to make signing useful?&lt;/p&gt;

&lt;p&gt;I don't believe we need to have 100% of people verifying software to
make signing useful.  I also believe that having a number greater than
what we have now, which is effectively 0%, is useful.  I don't buy the
argument that because some people can't or won't verify software, we
shouldn't let anyone verify software.&lt;/p&gt;

&lt;p&gt;I also believe that once some people start using software, any
software, it will find itself being improved.  As time goes on, these
improvements make it easier to use by less interested people.  I
believe once 1% of gem users sign and verify software, it won't be
long before the tools are good enough for 2%, and then 4%, and so on
and so on.&lt;/p&gt;

&lt;h2&gt;So start signing your gems&lt;/h2&gt;

&lt;p&gt;This is the first step in the journey of a thousand miles.  The tools
are there.  But developers need to sign their gems before users can
verify them.&lt;/p&gt;

&lt;p&gt;And I'm not just talking rubygems-openpgp here.  Give the integrated
signing a try too. In fact, rubygems-openpgp isn't incompatible with
the existing solution.  You can sign with both solutions if you want.&lt;/p&gt;

&lt;p&gt;Please just give it a try...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Signing Key Security</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/signing-key-security.html"/>
   <updated>2013-02-20T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/signing-key-security</id>
   <content type="html">&lt;h1&gt;Signing Key Security&lt;/h1&gt;

&lt;p&gt;It is critical that our signing keys are securely maintained.  If not,
an attacker can issue malicious signatures on our behalf, bypassing
the actual certification process.  Here are the steps we take to
secure the signing keys.&lt;/p&gt;

&lt;h2&gt;Master Signing Key authenticates the current Signing Key&lt;/h2&gt;

&lt;p&gt;A master signing key authenticates the current active signing key. If
the signing key is compromised, it will be revoked and a new one will
take its place.  The master signing key was generated on a computer
that has never been and will never be on a network.  To compromise the
master key an attacker would need to access this computer physically
at its current undisclosed location.&lt;/p&gt;

&lt;p&gt;Master key fingerprint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   4096R/FDBA50FB 2013-02-16 [expires: 2014-02-16]
      Key fingerprint = BEED FE71 7668 50BF A6DE  5A19 25A6 5396 FDBA 50FB
uid                  rubygems-openpgp Certificate Authority MASTER KEY
                                       (http://rubygems-openpgp-ca.org)
sub   4096R/9A39A769 2013-02-16 [expires: 2014-02-16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fingerprint can also be retrieved from our &lt;a href=&quot;https://github.com/grant-olson/rubygems-openpgp-ca.org&quot;&gt;Github
page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Signing computer is physically located on-site&lt;/h2&gt;

&lt;p&gt;It is not in the cloud.  It is physically controlled by us.&lt;/p&gt;

&lt;h2&gt;Signing occurs over an 'air gap'&lt;/h2&gt;

&lt;p&gt;Signatures are not issued via the web server where you registered your
key.  After you have authenticated your key with the web server we
sign on another computer with an 'air gap' in place.  If the web
server is compromised, an attacker can't just ssh into the signing
server.&lt;/p&gt;

&lt;h2&gt;Signing key is on an OpenPGP smart card&lt;/h2&gt;

&lt;p&gt;Once we're on the signing computer, the signing key is contained on an
&lt;a href=&quot;http://g10code.com/p-card.html&quot;&gt;OpenPGP smart card&lt;/a&gt; that is only
inserted and activated for the duration of signing.&lt;/p&gt;

&lt;p&gt;If the signing computer is compromised remotely, an attacker won't be
able to physically insert the smart card and activate it.&lt;/p&gt;

&lt;p&gt;If the signing computer is compromised locally, an attacker still
requires access to the smart card.&lt;/p&gt;

&lt;p&gt;If the smart card lost or stolen, an attacker only has three attempts
to enter a passphrase before the card lock itself down.  Attempting to
unlock the card unsuccessfully three times will cause the card to self
destruct.  A brute force attack is not possible.&lt;/p&gt;

&lt;h2&gt;Signing key has a rotating expiration date&lt;/h2&gt;

&lt;p&gt;The signing key is set to expire every sixty days.  At the end of that
sixty days, assuming the key has not been compromised, it is renewed
for another 60 days.  This forces users to practice good keyring
hygiene and refresh their keyring, retrieving any revocations issued
by the signing key, or to the signing key itself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Contact</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/contact.html"/>
   <updated>2013-02-20T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/contact</id>
   <content type="html">&lt;h1&gt;Contact&lt;/h1&gt;

&lt;h2&gt;Mailing List&lt;/h2&gt;

&lt;p&gt;The google group
&lt;a href=&quot;https://groups.google.com/forum/#!forum/rubygems-openpgp&quot;&gt;rubygems-openpgp&lt;/a&gt;
is available for discussion of all things remotely related to
rubygems-openpgp.&lt;/p&gt;

&lt;h2&gt;Bugs? Feature Requests?&lt;/h2&gt;

&lt;p&gt;Issues with the rubygems-openpgp gem can be reported at
&lt;a href=&quot;http://github.com/grant-olson/rubygems-openpgp/issues&quot;&gt;rubygems-openpgp issue
tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Issues with this website can be reported at &lt;a href=&quot;http://github.com/grant-olson/rubygems-openpgp-ca.org/issues&quot;&gt;rubygems-openpgp-ca.org
issue
tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Questions?  Comments?&lt;/h2&gt;

&lt;p&gt;Feel free to shoot me an email: kgo at grant-olson dot net.  My
OpenPGP key is 0xE3B5806F.  I always use an encryption-capable email
client so feel free to encrypt, even if it's just for fun.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   2048R/E3B5806F 2010-01-11 [expires: 2014-01-03]
      Key fingerprint = A530 C31C D762 0D26 E2BA  C384 B6F6 FFD0 E3B5 806F
uid                  Grant T. Olson (Personal email) &amp;lt;kgo at grant-olson dot net&amp;gt;
uid                  Grant T. Olson (pikimal) &amp;lt;grant at pikimal dot com&amp;gt;
uid                  Grant T Olson &amp;lt;grant at webkite dot com&amp;gt;
sub   2048R/6A8F7CF6 2010-01-11 [expires: 2014-01-03]
sub   2048R/A18A54D6 2010-03-01 [expires: 2014-01-03]
sub   2048R/D53982CE 2010-08-31 [expires: 2014-01-03]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Security issue?&lt;/h2&gt;

&lt;p&gt;Same contact info as above.&lt;/p&gt;

&lt;p&gt;If you need to send an encrypted email by don't have the correct
software installed, you can use
&lt;a href=&quot;https://privacybox.de/grant.msg&quot;&gt;privacybox&lt;/a&gt;. If you do so, please
include a contact email in the message. Also note I will be unable to
reply securely.&lt;/p&gt;

&lt;h2&gt;Donations?&lt;/h2&gt;

&lt;p&gt;To date I've spent over 100 hours and over $300 on this project.  If you
want to say thanks, send some bitcoins to
1GEuzdKztPBTsUe5c4r8zs123pJ18CmTi6.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Authentication</title>
   <link href="https://www.rubygems-openpgp-ca.org/blog/authentication.html"/>
   <updated>2013-02-20T00:00:00-05:00</updated>
   <id>https://www.rubygems-openpgp-ca.org/blog/authentication</id>
   <content type="html">&lt;h1&gt;Authentication&lt;/h1&gt;

&lt;h2&gt;Authentication is hard...&lt;/h2&gt;

&lt;p&gt;How do you validate that a signing key is authentic?  At first it
seems simple.  Well this is the same key that's on the author's
website or github page, so it has to be good.  But then you realize
that if someone hacked the developer's email they could also just
reset a password and publish a forged key on the website.  And then
you think of another problem.  And another loophole.&lt;/p&gt;

&lt;p&gt;And before you know it you've realized the only surefire way to
authenticate the key is to meet the developer in person and verify it
face to face.  (And now that you're paranoid, you start to wonder if
that really is the developer, or a clone or robot designed by agents
of Eastasia to deceive you.)&lt;/p&gt;

&lt;h2&gt;Enter the rubygems-openpgp Certificate Authority&lt;/h2&gt;

&lt;p&gt;We attempt to provide some base-level authentication of gem
developer's signing keys.  It's not by any means perfect, but provides
a reasonable starting point to trust signing keys without having to
authenticate hundreds of individual developer's keys.&lt;/p&gt;

&lt;h3&gt;When we've signed off on a key, we're asserting...&lt;/h3&gt;

&lt;h4&gt;The applicant controlled the email account attached to the signing key.&lt;/h4&gt;

&lt;p&gt;Anyone can generate a key with any email.  We confirm the applicant is
actually in possession of the email address used to sign by sending a
confirmation email.&lt;/p&gt;

&lt;h4&gt;The applicant controlled their signing key&lt;/h4&gt;

&lt;p&gt;This is why we send an encrypted confirmation link.  A applicant won't
be able to complete confirmation without control of their personal
signing key.&lt;/p&gt;

&lt;h4&gt;The applicant actually is an active applicant&lt;/h4&gt;

&lt;p&gt;We check to see that the applicant has a rubygems.org account, has
contributed a non-trivial gem, and is on some level a member of the
ruby community.&lt;/p&gt;

&lt;h4&gt;The applicant is authorized to publish on rubygems.org&lt;/h4&gt;

&lt;p&gt;We do this by confirming either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;That the applicant has the same email account on rubygems.org as
they do on the application.  (They could reset their password on
rubygems.org)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Or, in the case the applicant is using an organizational signing key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;That the applicant has successfully published a gem to rubygems.org
signed by their signing key.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;All signing is manually verified by a human&lt;/h3&gt;

&lt;p&gt;A human verifies the sanity of all of the above elements for anything
suspicious. (For example, a signing key that has user ids for
haxxor@example.org and billg@microsoft.com, that is registered under
the haxxor@example.org account.)&lt;/p&gt;

&lt;h3&gt;Once your key has been authenticated, the authentication is locked.&lt;/h3&gt;

&lt;p&gt;If your email is compromised down the road, the malicious user won't
be able to upload a replacement public key. (Eventually there will be
a revocation policy for lost or compromised keys, but it will not be
automatic.)&lt;/p&gt;

&lt;h2&gt;What we do not authenticate&lt;/h2&gt;

&lt;h4&gt;That a applicant has no malicous intent.&lt;/h4&gt;

&lt;p&gt;They could still upload a gem that runs &lt;code&gt;rm -rf /&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;That the applicant has good security practices&lt;/h4&gt;

&lt;p&gt;We can't guarantee that an applicant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Properly secures their signing key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Used a strong password at rubygems.org.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Our system isn't the be-all and end-all to authentication, it's just the beginning&lt;/h2&gt;

&lt;p&gt;The authentication scheme isn't perfect.  But it isn't worthless
either.  We think this should provide enough authentication
for most users.  And it's better than simply performing no
authentication.&lt;/p&gt;

&lt;p&gt;One of the goals of this project is to provide some incentive to get
developers to sign their gems, so that a variety of additional
authentication systems can be put into place.&lt;/p&gt;

&lt;p&gt;Imagine a world where in addition to our certification any or all of
the following happened:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers who knew each other personally authenticated each others keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local user groups authenticated keys, establishing not only
authenticity but that the signee is considered to be a member in
good standing with the local community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keys were signed by something like &quot;RailsConf 2013&quot; establishing
that the user has been at said conference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And more...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But for that we need the signatures first.&lt;/p&gt;

&lt;h2&gt;So&lt;/h2&gt;

&lt;p&gt;Sign your gems.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
